{
  "id" : "aced401f-6f6d-402a-a1d4-56615c024bc2",
  "parentId" : "c1157d13-0b77-4386-a0f9-35ade546be9d",
  "rootId" : "cd371ce0-9406-4312-9d72-dfdd24bdf2fa",
  "name" : "root.BWA_MEM_Bundle_0_7_13.1",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "deduplication" : "MarkDuplicates",
    "filter_out_secondary_alignments" : true,
    "input_reads" : [ {
      "size" : 6658418440,
      "path" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/SBG_Pair_FASTQs_by_Metadata/C835.HCC1143_BL.4.converted.pe_1.std.fastq",
      "location" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/SBG_Pair_FASTQs_by_Metadata/C835.HCC1143_BL.4.converted.pe_1.std.fastq",
      "checksum" : "sha1$8ac4486c0dc0f7134bc51f60a5258fbfab4545ae",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "Quality scale" : "sanger",
          "case_id" : "CCLE-HCC1143BL",
          "experimental_strategy" : "WXS",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "1",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143BL",
          "sample_type" : "EBV Immortalized Normal",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    }, {
      "size" : 6658418440,
      "path" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/SBG_Pair_FASTQs_by_Metadata/C835.HCC1143_BL.4.converted.pe_2.std.fastq",
      "location" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/SBG_Pair_FASTQs_by_Metadata/C835.HCC1143_BL.4.converted.pe_2.std.fastq",
      "checksum" : "sha1$a1413be27d3aaf6b5cf243682c7f74b3988f9e4d",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "Quality scale" : "sanger",
          "case_id" : "CCLE-HCC1143BL",
          "experimental_strategy" : "WXS",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143BL",
          "sample_type" : "EBV Immortalized Normal",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ],
    "mark_shorter" : true,
    "output_format" : "SortedBAM",
    "reference_index_tar" : [ {
      "size" : 8680417280,
      "path" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/BWA_MEM_Bundle_0_7_13/1/human_g1k_v37_decoy.fasta.tar",
      "location" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/BWA_INDEX/human_g1k_v37_decoy.fasta.tar",
      "name" : "human_g1k_v37_decoy.fasta.tar",
      "checksum" : "sha1$21153dd41f8e1b1f7135d700527fadb1bef1ed54",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ],
    "sambamba_threads" : 8,
    "sort_memory" : 4,
    "threads" : 8,
    "total_memory" : 15
  },
  "outputs" : {
    "aligned_reads" : {
      "size" : 5188511985,
      "path" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bam",
      "location" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bam",
      "name" : "C835.HCC1143_BL.4.converted.bam",
      "checksum" : "sha1$dd4883e42ac4a0d45d1e750f1f960bd5b63ce7e5",
      "secondaryFiles" : [ {
        "$type" : "File",
        "size" : 5511448,
        "path" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bam.bai",
        "location" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bam.bai",
        "name" : "C835.HCC1143_BL.4.converted.bam.bai",
        "checksum" : "sha1$f0e6524519ce8bcf20b2876f48872cf4d6a13e32",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      }, {
        "$type" : "File",
        "size" : 0,
        "path" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bai",
        "location" : "/media/storage2/workdir/LocalRerun20170817094835/app-2017-08-17-101032.250/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bai",
        "name" : "C835.HCC1143_BL.4.converted.bai",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      } ],
      "properties" : {
        "sbg:metadata" : {
          "Quality scale" : "sanger",
          "case_id" : "CCLE-HCC1143BL",
          "experimental_strategy" : "WXS",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "reference_genome" : "human_g1k_v37_decoy",
          "sample_id" : "HCC1143BL",
          "sample_type" : "EBV Immortalized Normal",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ ]
}