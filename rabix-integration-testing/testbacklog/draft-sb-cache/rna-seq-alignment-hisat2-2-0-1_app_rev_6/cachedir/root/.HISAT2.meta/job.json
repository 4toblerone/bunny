{
  "id" : "d1cd0588-d38c-4194-98eb-83e1217eb298",
  "parentId" : "e97faa6c-c7a5-475d-8e0d-67e90264937c",
  "rootId" : "e97faa6c-c7a5-475d-8e0d-67e90264937c",
  "name" : "root.HISAT2",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "indexed_reference" : [ {
      "size" : 4240455680,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2_Build/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75.spliceSites_HISAT2-2.0.1.tar",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2_Build/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75.spliceSites_HISAT2-2.0.1.tar",
      "name" : "human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75.spliceSites_HISAT2-2.0.1.tar",
      "checksum" : "sha1$23264f60760a4facd5c6fa2edc898bd6dea20891",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "human_g1k_v37_decoy",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ],
    "reads" : [ {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/SBG_FASTQ_Quality_Detector/1/G20479.HCC1143.2.converted.pe_1.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/SBG_FASTQ_Quality_Detector/1/G20479.HCC1143.2.converted.pe_1.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.fastq",
      "checksum" : "sha1$e31f47f69a6a7e1717427918371abeff5ceb8091",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "1",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/SBG_FASTQ_Quality_Detector/2/G20479.HCC1143.2.converted.pe_2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/SBG_FASTQ_Quality_Detector/2/G20479.HCC1143.2.converted.pe_2.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_2.fastq",
      "checksum" : "sha1$1099d08056ddc31c3ec4589139b44ced0622136c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "align_conc" : [ {
      "size" : 17374422626,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.alignedConcordantly_1.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.alignedConcordantly_1.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.alignedConcordantly_1.fastq",
      "checksum" : "sha1$7054dc56f52554241ea63a07ff3ab615e5a662c4",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 17374422626,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.alignedConcordantly_2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.alignedConcordantly_2.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.alignedConcordantly_2.fastq",
      "checksum" : "sha1$15bba77f1828da48a74cba3b9ad2c6ac608f19c9",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ],
    "metrics_file" : {
      "size" : 2030,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/metrics.txt",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/metrics.txt",
      "name" : "metrics.txt",
      "checksum" : "sha1$f4ea382e38a3bb9e87af872d29408f493e4c6825",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "novel_ss_out" : {
      "size" : 13443566,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/novel_splice_sites.txt",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/novel_splice_sites.txt",
      "name" : "novel_splice_sites.txt",
      "checksum" : "sha1$e6c015033654899c560f0f74d02510ee4b8521bb",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "out_align" : {
      "size" : 55761107476,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.HISAT-2.0.1.aligned.sam",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.HISAT-2.0.1.aligned.sam",
      "name" : "G20479.HCC1143.2.converted.pe_1.HISAT-2.0.1.aligned.sam",
      "checksum" : "sha1$8bba34add0033a00dd1a1adf07ef72440dfb5b50",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "unal_conc" : [ {
      "size" : 1871477663,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.unalignedConcordantly_1.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.unalignedConcordantly_1.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.unalignedConcordantly_1.fastq",
      "checksum" : "sha1$526ea7007e9b9c2f45473c7c4fcc97fcdab20c09",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 1837242984,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.unalignedConcordantly_2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.unalignedConcordantly_2.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.unalignedConcordantly_2.fastq",
      "checksum" : "sha1$a6e57ad6c307afe39649c31e3ff21c97bf56893e",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ],
    "unpaired_align" : {
      "size" : 0,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.unpairedAligned.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.unpairedAligned.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.unpairedAligned.fastq",
      "checksum" : "sha1$da39a3ee5e6b4b0d3255bfef95601890afd80709",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "unpaired_unal" : {
      "size" : 0,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.unpairedUnaligned.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2/G20479.HCC1143.2.converted.pe_1.unpairedUnaligned.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.unpairedUnaligned.fastq",
      "checksum" : "sha1$da39a3ee5e6b4b0d3255bfef95601890afd80709",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "novel_ss_out", "metrics_file", "out_align" ]
}