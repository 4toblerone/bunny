{
  "id" : "d7e5af61-b730-499f-ab87-d47fa53b4e09",
  "parentId" : "e97faa6c-c7a5-475d-8e0d-67e90264937c",
  "rootId" : "e97faa6c-c7a5-475d-8e0d-67e90264937c",
  "name" : "root.HISAT2_Build",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "references" : [ {
      "size" : 4240455680,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2_Build/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75.spliceSites_HISAT2-2.0.1.tar",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/files/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75.spliceSites_HISAT2-2.0.1.tar",
      "name" : "human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75.spliceSites_HISAT2-2.0.1.tar",
      "checksum" : "sha1$23264f60760a4facd5c6fa2edc898bd6dea20891",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "human_g1k_v37_decoy",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "tar_out" : {
      "size" : 4240455680,
      "path" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2_Build/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75.spliceSites_HISAT2-2.0.1.tar",
      "location" : "/media/storage/workdir/LocalRerun20170807132433/app-2017-08-07-140407.68/root/HISAT2_Build/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75.spliceSites_HISAT2-2.0.1.tar",
      "name" : "human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75.spliceSites_HISAT2-2.0.1.tar",
      "checksum" : "sha1$23264f60760a4facd5c6fa2edc898bd6dea20891",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "human_g1k_v37_decoy",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ ]
}