{
  "id" : "e6a5e2e0-40e6-4df2-97dd-e2407b71e24f",
  "parentId" : "2eab088d-cf4f-4507-8ae0-eecd0812f7c0",
  "rootId" : "63472647-42ce-4137-9b86-3ce36e8e9c38",
  "name" : "root.SBG_FASTQ_Quality_Adjuster.2",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "fastq" : [ {
      "size" : 6658418440,
      "path" : "/media/storage2/workdir/LocalRerun20170821150211/app-2017-08-21-160931.584/root/SBG_FASTQ_Quality_Adjuster/2/C835.HCC1143_BL.4.converted.pe_2.fastq",
      "location" : "/media/storage2/workdir/LocalRerun20170821150211/files/C835.HCC1143_BL.4.converted.pe_2.fastq",
      "name" : "C835.HCC1143_BL.4.converted.pe_2.fastq",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143BL",
          "experimental_strategy" : "WXS",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143BL",
          "sample_type" : "EBV Immortalized Normal",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "result" : {
      "size" : 6658418440,
      "path" : "/media/storage2/workdir/LocalRerun20170821150211/app-2017-08-21-160931.584/root/SBG_FASTQ_Quality_Adjuster/2/C835.HCC1143_BL.4.converted.pe_2.std.fastq",
      "location" : "/media/storage2/workdir/LocalRerun20170821150211/app-2017-08-21-160931.584/root/SBG_FASTQ_Quality_Adjuster/2/C835.HCC1143_BL.4.converted.pe_2.std.fastq",
      "name" : "C835.HCC1143_BL.4.converted.pe_2.std.fastq",
      "checksum" : "sha1$a1413be27d3aaf6b5cf243682c7f74b3988f9e4d",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "Quality scale" : "sanger",
          "case_id" : "CCLE-HCC1143BL",
          "experimental_strategy" : "WXS",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143BL",
          "sample_type" : "EBV Immortalized Normal",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ ]
}