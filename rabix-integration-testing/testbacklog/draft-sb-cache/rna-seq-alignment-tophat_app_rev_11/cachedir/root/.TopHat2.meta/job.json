{
  "id" : "edd3c8fc-6fa4-4d78-bec8-f40660bc1745",
  "parentId" : "04d0e6e9-1271-401a-858a-d681e95c16c2",
  "rootId" : "04d0e6e9-1271-401a-858a-d681e95c16c2",
  "name" : "root.TopHat2",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "GTF" : [ {
      "size" : 847928511,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/files/Homo_sapiens.GRCh37.75.gtf",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/files/Homo_sapiens.GRCh37.75.gtf",
      "name" : "Homo_sapiens.GRCh37.75.gtf",
      "checksum" : "sha1$f46a5407f5fc1823860a7ddd7e1f322098f34d84",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : { }
      },
      "$type" : "File"
    } ],
    "bowtie_index_archive" : [ {
      "size" : 4117452800,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/human_g1k_v37_decoy.phiX174_bowtie2-2.2.6.tar",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/Bowtie2_Indexer/human_g1k_v37_decoy.phiX174_bowtie2-2.2.6.tar",
      "name" : "human_g1k_v37_decoy.phiX174_bowtie2-2.2.6.tar",
      "checksum" : "sha1$1c6a4fc1d5f937217ae93545151c58eef7006a14",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "fasta_reference",
          "reference_genome" : "human_g1k_v37_decoy.phiX174"
        }
      },
      "$type" : "File"
    } ],
    "read" : [ {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/SBG_FASTQ_Quality_Detector/1/G20479.HCC1143.2.converted.pe_1.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/SBG_FASTQ_Quality_Detector/1/G20479.HCC1143.2.converted.pe_1.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.fastq",
      "checksum" : "sha1$e31f47f69a6a7e1717427918371abeff5ceb8091",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "1",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/SBG_FASTQ_Quality_Detector/2/G20479.HCC1143.2.converted.pe_2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/SBG_FASTQ_Quality_Detector/2/G20479.HCC1143.2.converted.pe_2.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_2.fastq",
      "checksum" : "sha1$1099d08056ddc31c3ec4589139b44ced0622136c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "align_summary" : {
      "size" : 565,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_align_summary.txt",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_align_summary.txt",
      "name" : "G20479.HCC1143.2.converted.pe_align_summary.txt",
      "checksum" : "sha1$04684ee44e02b4e30b08512e2a279b19681063eb",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "aligned" : {
      "size" : 10517111933,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_accepted_hits.bam",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_accepted_hits.bam",
      "name" : "G20479.HCC1143.2.converted.pe_accepted_hits.bam",
      "checksum" : "sha1$7933ac253e13434cab2ec5340fd441e979c9c868",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "tophat_deletions" : {
      "size" : 4254595,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_deletions.bed",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_deletions.bed",
      "name" : "G20479.HCC1143.2.converted.pe_deletions.bed",
      "checksum" : "sha1$76e6dee7563742fe8b9524823f146fc41889205c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "tophat_insertions" : {
      "size" : 4260303,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_insertions.bed",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_insertions.bed",
      "name" : "G20479.HCC1143.2.converted.pe_insertions.bed",
      "checksum" : "sha1$3a60cf39b213ed058f0c7516461af8e39d72b80c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "tophat_junctions" : {
      "size" : 27073522,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_junctions.bed",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_junctions.bed",
      "name" : "G20479.HCC1143.2.converted.pe_junctions.bed",
      "checksum" : "sha1$9641be6298277fe3d3386d0381c7a2aecdd096c6",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "unmapped" : {
      "size" : 1378331721,
      "path" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_unmapped.bam",
      "location" : "/media/storage/workdir/LocalRerun20170810101035/app-2017-08-10-120230.630/root/TopHat2/tophat_out/G20479.HCC1143.2.converted.pe_unmapped.bam",
      "name" : "G20479.HCC1143.2.converted.pe_unmapped.bam",
      "checksum" : "sha1$e80fe821d401f6f398e673430f19a66e5ec5c9fd",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "align_summary", "tophat_deletions", "tophat_junctions", "unmapped", "tophat_insertions" ]
}