{
  "id" : "a383f6bd-90ca-457d-89dd-dec1cdb64557",
  "parentId" : "c74a1c9e-63b1-42f4-a62e-22390505f569",
  "rootId" : "c74a1c9e-63b1-42f4-a62e-22390505f569",
  "name" : "root.RSEM_Calculate_Expression",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "calc_ci" : true,
    "output_genome_bam" : true,
    "read_files" : [ {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/files/G20479.HCC1143.2.converted.pe_1.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/files/G20479.HCC1143.2.converted.pe_1.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.fastq",
      "checksum" : "sha1$e31f47f69a6a7e1717427918371abeff5ceb8091",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "1",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/files/G20479.HCC1143.2.converted.pe_2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/files/G20479.HCC1143.2.converted.pe_2.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_2.fastq",
      "checksum" : "sha1$1099d08056ddc31c3ec4589139b44ced0622136c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ],
    "rsem_prepare_reference_archive" : [ {
      "size" : 33894727680,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_rsem-1.2.31.star.tar",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Prepare_Reference/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_rsem-1.2.31.star.tar",
      "name" : "human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_rsem-1.2.31.star.tar",
      "checksum" : "sha1$0f81afa7afdd10a6aa56ab7fc916ff189c7c354a",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "reference_name" : "human_g1k_v37_decoy.phiX174",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ],
    "sort_bam_by_coordinate" : true,
    "star" : true
  },
  "outputs" : {
    "rsem_calculate_expression_archive" : {
      "size" : 57430016000,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/rsem_calculate_expression_archive.HCC1143.tar",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/rsem_calculate_expression_archive.HCC1143.tar",
      "name" : "rsem_calculate_expression_archive.HCC1143.tar",
      "checksum" : "sha1$f41bf902db802eeee1c4e9d3063a39a9245ba62f",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_name" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "sample_name_genes_results" : {
      "size" : 9922015,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.genes.results",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.genes.results",
      "name" : "HCC1143.genes.results",
      "checksum" : "sha1$1fc3bdf5d44543c9afbe2e4b8693f9704033650e",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "sample_name_genome_bam" : {
      "size" : 8494001675,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.genome.sorted.bam",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.genome.sorted.bam",
      "name" : "HCC1143.genome.sorted.bam",
      "checksum" : "sha1$0056db67e25794b63e0f366e8e55e9a50fc8a03f",
      "secondaryFiles" : [ {
        "$type" : "File",
        "size" : 2516648,
        "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.genome.sorted.bam.bai",
        "location" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.genome.sorted.bam.bai",
        "name" : "HCC1143.genome.sorted.bam.bai",
        "checksum" : "sha1$c06242a92db5d3e65b9ee7415de9c6d011ffc763",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      } ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "sample_name_isoforms_results" : {
      "size" : 28573054,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.isoforms.results",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.isoforms.results",
      "name" : "HCC1143.isoforms.results",
      "checksum" : "sha1$fe1c53e9bbf6fa29a22bb302b5379ffeca1b4b39",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "sample_name_transcript_bam" : {
      "size" : 26910630684,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.transcript.sorted.bam",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.transcript.sorted.bam",
      "name" : "HCC1143.transcript.sorted.bam",
      "checksum" : "sha1$cd8482d0c1258e603f2a7ad5365b9b6ddeec314a",
      "secondaryFiles" : [ {
        "$type" : "File",
        "size" : 11918176,
        "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.transcript.sorted.bam.bai",
        "location" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Calculate_Expression/HCC1143.transcript.sorted.bam.bai",
        "name" : "HCC1143.transcript.sorted.bam.bai",
        "checksum" : "sha1$e741485d6a7c89443f719718d0c28caa762810ef",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      } ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "star_log_files" : [ ]
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "sample_name_isoforms_results", "sample_name_genome_bam", "sample_name_transcript_bam", "sample_name_genes_results" ]
}