{
  "id" : "2e0b1ff2-a33f-498b-86a5-df5599df88a1",
  "parentId" : "c74a1c9e-63b1-42f4-a62e-22390505f569",
  "rootId" : "c74a1c9e-63b1-42f4-a62e-22390505f569",
  "name" : "root.RSEM_Prepare_Reference",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "gtf" : [ {
      "size" : 847928511,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/files/Homo_sapiens.GRCh37.75.gtf",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/files/Homo_sapiens.GRCh37.75.gtf",
      "name" : "Homo_sapiens.GRCh37.75.gtf",
      "checksum" : "sha1$f46a5407f5fc1823860a7ddd7e1f322098f34d84",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : { }
      },
      "$type" : "File"
    } ],
    "reference_fasta_file" : [ {
      "size" : 33894727680,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Prepare_Reference/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_rsem-1.2.31.star.tar",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/files/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_rsem-1.2.31.star.tar",
      "name" : "human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_rsem-1.2.31.star.tar",
      "checksum" : "sha1$0f81afa7afdd10a6aa56ab7fc916ff189c7c354a",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "reference_name" : "human_g1k_v37_decoy.phiX174",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ],
    "star" : true
  },
  "outputs" : {
    "rsem_prepare_reference_archive" : {
      "size" : 33894727680,
      "path" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Prepare_Reference/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_rsem-1.2.31.star.tar",
      "location" : "/media/storage/workdir/LocalRerun20170904125541/app-2017-09-05-103654.434/root/RSEM_Prepare_Reference/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_rsem-1.2.31.star.tar",
      "name" : "human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_rsem-1.2.31.star.tar",
      "checksum" : "sha1$0f81afa7afdd10a6aa56ab7fc916ff189c7c354a",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "reference_name" : "human_g1k_v37_decoy.phiX174",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ ]
}