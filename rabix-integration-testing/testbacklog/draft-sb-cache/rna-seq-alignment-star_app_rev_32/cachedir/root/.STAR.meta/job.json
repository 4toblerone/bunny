{
  "id" : "4d7d92b2-149d-450c-abd4-232c6308a442",
  "parentId" : "20b6cd95-a5f8-402b-b0f3-8dc6b80e2b16",
  "rootId" : "20b6cd95-a5f8-402b-b0f3-8dc6b80e2b16",
  "name" : "root.STAR",
  "app" : "data:text/plain;base64,ewogICJjb250cmlidXRvciIgOiBbIF0sCiAgIm93bmVyIiA6IFsgXSwKICAiY3dsVmVyc2lvbiIgOiAic2JnOmRyYWZ0LTIiLAogICJpbnB1dHMiIDogWyB7CiAgICAiaWQiIDogIiN3aW5GbGFua05iaW5zIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0td2luRmxhbmtOYmlucyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiPWxvZzIod2luRmxhbmspLCB3aGVyZSB3aW4gRmxhbmsgaXMgdGhlIHNpemUgb2YgdGhlIGxlZnQgYW5kIHJpZ2h0IGZsYW5raW5nIHJlZ2lvbnMgZm9yIGVhY2ggd2luZG93IChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiNCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJXaW5kb3dzLCBBbmNob3JzLCBCaW5uaW5nIiwKICAgICJsYWJlbCIgOiAiRmxhbmtpbmcgcmVnaW9ucyBzaXplIgogIH0sIHsKICAgICJpZCIgOiAiI3dpbkJpbk5iaXRzIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0td2luQmluTmJpdHMiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIj1sb2cyKHdpbkJpbiksIHdoZXJlIHdpbkJpbiBpcyB0aGUgc2l6ZSBvZiB0aGUgYmluIGZvciB0aGUgd2luZG93cy9jbHVzdGVyaW5nLCBlYWNoIHdpbmRvdyB3aWxsIG9jY3VweSBhbiBpbnRlZ2VyIG51bWJlciBvZiBiaW5zIChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMTYiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiV2luZG93cywgQW5jaG9ycywgQmlubmluZyIsCiAgICAibGFiZWwiIDogIkJpbiBzaXplIgogIH0sIHsKICAgICJpZCIgOiAiI3dpbkFuY2hvck11bHRpbWFwTm1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXdpbkFuY2hvck11bHRpbWFwTm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4IG51bWJlciBvZiBsb2NpIGFuY2hvcnMgYXJlIGFsbG93ZWQgdG8gbWFwIHRvIChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiNTAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiV2luZG93cywgQW5jaG9ycywgQmlubmluZyIsCiAgICAibGFiZWwiIDogIk1heCBsb2NpIGFuY2hvcnMiCiAgfSwgewogICAgImlkIiA6ICIjd2luQW5jaG9yRGlzdE5iaW5zIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0td2luQW5jaG9yRGlzdE5iaW5zIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggbnVtYmVyIG9mIGJpbnMgYmV0d2VlbiB0d28gYW5jaG9ycyB0aGF0IGFsbG93cyBhZ2dyZWdhdGlvbiBvZiBhbmNob3JzIGludG8gb25lIHdpbmRvdyAoaW50PjApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjkiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiV2luZG93cywgQW5jaG9ycywgQmlubmluZyIsCiAgICAibGFiZWwiIDogIk1heCBiaW5zIGJldHdlZW4gYW5jaG9ycyIKICB9LCB7CiAgICAiaWQiIDogIiN1bm1hcHBlZE91dHB1dE5hbWUiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIk5hbWVzIG9mIHRoZSB1bm1hcHBlZCBvdXRwdXQgZmlsZXMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiXCJVbm1hcHBlZC5vdXRcIiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJVbm1hcHBlZCBvdXRwdXQgZmlsZSBuYW1lcyIKICB9LCB7CiAgICAiaWQiIDogIiN0d29wYXNzTW9kZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAidHdvcGFzc01vZGUiLAogICAgICAic3ltYm9scyIgOiBbICJOb25lIiwgIkJhc2ljIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXR3b3Bhc3NNb2RlIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICIyLXBhc3MgbWFwcGluZyBtb2RlLiBOb25lOiAxLXBhc3MgbWFwcGluZzsgQmFzaWM6IGJhc2ljIDItcGFzcyBtYXBwaW5nLCB3aXRoIGFsbCAxc3QgcGFzcyBqdW5jdGlvbnMgaW5zZXJ0ZWQgaW50byB0aGUgZ2Vub21lIGluZGljZXMgb24gdGhlIGZseS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJOb25lIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIjItcGFzcyBtYXBwaW5nIiwKICAgICJsYWJlbCIgOiAiVHdvLXBhc3MgbW9kZSIKICB9LCB7CiAgICAiaWQiIDogIiN0d29wYXNzMXJlYWRzTiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTnVtYmVyIG9mIHJlYWRzIHRvIHByb2Nlc3MgZm9yIHRoZSAxc3Qgc3RlcC4gMDogMS1zdGVwIG9ubHksIG5vIDJuZCBwYXNzOyB1c2UgdmVyeSBsYXJnZSBudW1iZXIgdG8gbWFwIGFsbCByZWFkcyBpbiB0aGUgZmlyc3Qgc3RlcCAoaW50PjApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi0xIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIjItcGFzcyBtYXBwaW5nIiwKICAgICJsYWJlbCIgOiAiUmVhZHMgdG8gcHJvY2VzcyBpbiAxc3Qgc3RlcCIKICB9LCB7CiAgICAiaWQiIDogIiNzb3J0VW5tYXBwZWRSZWFkcyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImJvb2xlYW4iIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIlVubWFwcGVkIHJlYWRzIGFyZSwgYnkgZGVmYXVsdCwgdW5zb3J0ZWQuIElmIHlvdSB3YW50IHRvIHNvcnQgdGhlbSBieSByZWFkIElELCBwbGVhc2Ugc3BlY2lmeSB0aGlzIG9wdGlvbiwgdGhvdWdoIGtlZXAgaW4gbWluZCB0aGF0IHRoaXMgY2FuIGluY3JlYXNlIFNUQVIgcnVuIHRpbWUuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiT2ZmIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIlNvcnQgdW5tYXBwZWQgcmVhZHMiCiAgfSwgewogICAgImlkIiA6ICIjc2pkYlNjb3JlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJFeHRyYSBhbGlnbm1lbnQgc2NvcmUgZm9yIGFsaWdubWVudHMgdGhhdCBjcm9zcyBkYXRhYmFzZSBqdW5jdGlvbnMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTcGxpY2UganVuY3Rpb25zIGRhdGFiYXNlIiwKICAgICJsYWJlbCIgOiAiRXh0cmEgYWxpZ25tZW50IHNjb3JlIgogIH0sIHsKICAgICJpZCIgOiAiI3NqZGJPdmVyaGFuZyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTGVuZ3RoIG9mIHRoZSBkb25vci9hY2NlcHRvciBzZXF1ZW5jZSBvbiBlYWNoIHNpZGUgb2YgdGhlIGp1bmN0aW9ucywgaWRlYWxseSA9IChtYXRlX2xlbmd0aCAtIDEpIChpbnQgPj0gMCksIGlmIGludCA9IDAsIHNwbGljZSBqdW5jdGlvbiBkYXRhYmFzZSBpcyBub3QgdXNlZC4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU3BsaWNlIGp1bmN0aW9ucyBkYXRhYmFzZSIsCiAgICAibGFiZWwiIDogIlwiT3ZlcmhhbmdcIiBsZW5ndGgiCiAgfSwgewogICAgImlkIiA6ICIjc2pkYkluc2VydFNhdmUiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogInNqZGJJbnNlcnRTYXZlIiwKICAgICAgInN5bWJvbHMiIDogWyAiQmFzaWMiLCAiQWxsIiwgIk5vbmUiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJXaGljaCBmaWxlcyB0byBzYXZlIHdoZW4gc2pkYiBqdW5jdGlvbnMgYXJlIGluc2VydGVkIG9uIHRoZSBmbHkgYXQgdGhlIG1hcHBpbmcgc3RlcC4gTm9uZTogbm90IHNhdmluZyBmaWxlcyBhdCBhbGw7IEJhc2ljOiBvbmx5IHNtYWxsIGp1bmN0aW9uL3RyYW5zY3JpcHQgZmlsZXM7IEFsbDogYWxsIGZpbGVzIGluY2x1ZGluZyBiaWcgR2Vub21lLCBTQSBhbmQgU0FpbmRleC4gVGhlc2UgZmlsZXMgYXJlIG91dHB1dCBhcyBhcmNoaXZlLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIk5vbmUiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU3BsaWNlIGp1bmN0aW9ucyBkYXRhYmFzZSIsCiAgICAibGFiZWwiIDogIlNhdmUganVuY3Rpb24gZmlsZXMiCiAgfSwgewogICAgImlkIiA6ICIjc2pkYkdURnRhZ0V4b25QYXJlbnRUcmFuc2NyaXB0IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAic3RyaW5nIiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJUYWcgbmFtZSB0byBiZSB1c2VkIGFzIGV4b25zIHRyYW5zY3JpcHQtcGFyZW50cy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJ0cmFuc2NyaXB0X2lkIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNwbGljZSBqdW5jdGlvbnMgZGF0YWJhc2UiLAogICAgImxhYmVsIiA6ICJFeG9ucycgcGFyZW50cyBuYW1lIgogIH0sIHsKICAgICJpZCIgOiAiI3NqZGJHVEZ0YWdFeG9uUGFyZW50R2VuZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgInN0cmluZyIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiVGFnIG5hbWUgdG8gYmUgdXNlZCBhcyBleG9ucyBnZW5lLXBhcmVudHMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiZ2VuZV9pZCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTcGxpY2UganVuY3Rpb25zIGRhdGFiYXNlIiwKICAgICJsYWJlbCIgOiAiR2VuZSBuYW1lIgogIH0sIHsKICAgICJpZCIgOiAiI3NqZGJHVEZmaWxlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJpdGVtcyIgOiAiRmlsZSIsCiAgICAgICJuYW1lIiA6ICJzamRiR1RGZmlsZSIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiR2VuZSBtb2RlbCBhbm5vdGF0aW9ucyBhbmQvb3Iga25vd24gdHJhbnNjcmlwdHMuIE5vIG5lZWQgdG8gaW5jbHVkZSB0aGlzIGlucHV0LCBleGNlcHQgaW4gY2FzZSBvZiB1c2luZyBcIm9uIHRoZSBmbHlcIiBhbm5vdGF0aW9ucy4gSWYgeW91IGFyZSBwcm92aWRpbmcgYSBHRkYzIGZpbGUgYW5kIHdpc2ggdG8gdXNlIFNUQVIgcmVzdWx0cyBmb3IgZnVydGhlciBkb3duc3RyZWFtIGFuYWx5c2lzLCBhIGdvb2QgaWRlYSB3b3VsZCBiZSB0byBzZXQgdGhlIFwiRXhvbnMnIHBhcmVudHMgbmFtZVwiIChpZDogc2pkYkdURnRhZ0V4b25QYXJlbnRUcmFuc2NyaXB0KSBvcHRpb24gdG8gXCJQYXJlbnRcIi4iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQmFzaWMiLAogICAgImxhYmVsIiA6ICJTcGxpY2UganVuY3Rpb24gZmlsZSIsCiAgICAic2JnOmZpbGVUeXBlcyIgOiAiR1RGLCBHRkYsIEdGRjIsIEdGRjMsIFRYVCIsCiAgICAicmVxdWlyZWQiIDogZmFsc2UKICB9LCB7CiAgICAiaWQiIDogIiNzamRiR1RGZmVhdHVyZUV4b24iLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIkZlYXR1cmUgdHlwZSBpbiBHVEYgZmlsZSB0byBiZSB1c2VkIGFzIGV4b25zIGZvciBidWlsZGluZyB0cmFuc2NyaXB0cy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJleG9uIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNwbGljZSBqdW5jdGlvbnMgZGF0YWJhc2UiLAogICAgImxhYmVsIiA6ICJTZXQgZXhvbnMgZmVhdHVyZSIKICB9LCB7CiAgICAiaWQiIDogIiNzamRiR1RGY2hyUHJlZml4IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAic3RyaW5nIiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJQcmVmaXggZm9yIGNocm9tb3NvbWUgbmFtZXMgaW4gYSBHVEYgZmlsZSAoZS5nLiAnY2hyJyBmb3IgdXNpbmcgRU5TTUVCTCBhbm5vdGF0aW9ucyB3aXRoIFVDU0MgZ2VuZW9tZXMpLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi0iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU3BsaWNlIGp1bmN0aW9ucyBkYXRhYmFzZSIsCiAgICAibGFiZWwiIDogIkNocm9tb3NvbWUgbmFtZXMiCiAgfSwgewogICAgImlkIiA6ICIjc2VlZFNlYXJjaFN0YXJ0TG1heE92ZXJMcmVhZCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImZsb2F0IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2VlZFNlYXJjaFN0YXJ0TG1heE92ZXJMcmVhZCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiU2VlZFNlYXJjaFN0YXJ0TG1heCBub3JtYWxpemVkIHRvIHJlYWQgbGVuZ3RoIChzdW0gb2YgbWF0ZXMnIGxlbmd0aHMgZm9yIHBhaXJlZC1lbmQgcmVhZHMpLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEuMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiU2VhcmNoIHN0YXJ0IHBvaW50IG5vcm1hbGl6ZWQiCiAgfSwgewogICAgImlkIiA6ICIjc2VlZFNlYXJjaFN0YXJ0TG1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNlZWRTZWFyY2hTdGFydExtYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkRlZmluZXMgdGhlIHNlYXJjaCBzdGFydCBwb2ludCB0aHJvdWdoIHRoZSByZWFkIC0gdGhlIHJlYWQgaXMgc3BsaXQgaW50byBwaWVjZXMgbm8gbG9uZ2VyIHRoYW4gdGhpcyB2YWx1ZSAoaW50PjApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjUwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJTZWFyY2ggc3RhcnQgcG9pbnQiCiAgfSwgewogICAgImlkIiA6ICIjc2VlZFNlYXJjaExtYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zZWVkU2VhcmNoTG1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiRGVmaW5lcyB0aGUgbWF4aW11bSBsZW5ndGggb2YgdGhlIHNlZWRzLCBpZiA9MCBtYXggc2VlZCBsZW5ndGggaXMgaW5maW5pdGUgKGludD49MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IHNlZWQgbGVuZ3RoIgogIH0sIHsKICAgICJpZCIgOiAiI3NlZWRQZXJXaW5kb3dObWF4IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2VlZFBlcldpbmRvd05tYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heCBudW1iZXIgb2Ygc2VlZHMgcGVyIHdpbmRvdyAoaW50Pj0wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICI1MCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IHNlZWRzIHBlciB3aW5kb3ciCiAgfSwgewogICAgImlkIiA6ICIjc2VlZFBlclJlYWRObWF4IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2VlZFBlclJlYWRObWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggbnVtYmVyIG9mIHNlZWRzIHBlciByZWFkIChpbnQ+PTApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEwMDAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIk1heCBzZWVkcyBwZXIgcmVhZCIKICB9LCB7CiAgICAiaWQiIDogIiNzZWVkTm9uZUxvY2lQZXJXaW5kb3ciLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zZWVkTm9uZUxvY2lQZXJXaW5kb3ciLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heCBudW1iZXIgb2Ygb25lIHNlZWQgbG9jaSBwZXIgd2luZG93IChpbnQ+PTApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJNYXggb25lLXNlZWQgbG9jaSBwZXIgd2luZG93IgogIH0sIHsKICAgICJpZCIgOiAiI3NlZWRNdWx0aW1hcE5tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zZWVkTXVsdGltYXBObWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJPbmx5IHBpZWNlcyB0aGF0IG1hcCBmZXdlciB0aGFuIHRoaXMgdmFsdWUgYXJlIHV0aWxpemVkIGluIHRoZSBzdGl0Y2hpbmcgcHJvY2VkdXJlIChpbnQ+PTApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEwMDAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJGaWx0ZXIgcGllY2VzIGZvciBzdGl0Y2hpbmciCiAgfSwgewogICAgImlkIiA6ICIjc2NvcmVTdGl0Y2hTSnNoaWZ0IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2NvcmVTdGl0Y2hTSnNoaWZ0IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXhpbXVtIHNjb3JlIHJlZHVjdGlvbiB3aGlsZSBzZWFyY2hpbmcgZm9yIFNKIGJvdW5kYXJpZXMgaW4gdGhlIHN0aXRjaGluZyBzdGVwLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU2NvcmluZyIsCiAgICAibGFiZWwiIDogIk1heCBzY29yZSByZWR1Y3Rpb24iCiAgfSwgewogICAgImlkIiA6ICIjc2NvcmVJbnNPcGVuIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2NvcmVJbnNPcGVuIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJJbnNlcnRpb24gb3BlbiBwZW5hbHR5LiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi0yIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNjb3JpbmciLAogICAgImxhYmVsIiA6ICJJbnNlcnRpb24gT3BlbiBQZW5hbHR5IgogIH0sIHsKICAgICJpZCIgOiAiI3Njb3JlSW5zQmFzZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNjb3JlSW5zQmFzZSIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiSW5zZXJ0aW9uIGV4dGVuc2lvbiBwZW5hbHR5IHBlciBiYXNlIChpbiBhZGRpdGlvbiB0byAtLXNjb3JlSW5zT3BlbikuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiLTIiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU2NvcmluZyIsCiAgICAibGFiZWwiIDogIkluc2VydGlvbiBleHRlbnNpb24gcGVuYWx0eSIKICB9LCB7CiAgICAiaWQiIDogIiNzY29yZUdlbm9taWNMZW5ndGhMb2cyc2NhbGUiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJmbG9hdCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNjb3JlR2Vub21pY0xlbmd0aExvZzJzY2FsZSIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiRXh0cmEgc2NvcmUgbG9nYXJpdGhtaWNhbGx5IHNjYWxlZCB3aXRoIGdlbm9taWMgbGVuZ3RoIG9mIHRoZSBhbGlnbm1lbnQ6IDxpbnQ+KmxvZzIoZ2Vub21pY0xlbmd0aCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiLTAuMjUiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU2NvcmluZyIsCiAgICAibGFiZWwiIDogIkxvZyBzY2FsZWQgc2NvcmUiCiAgfSwgewogICAgImlkIiA6ICIjc2NvcmVHYXBOb25jYW4iLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zY29yZUdhcE5vbmNhbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTm9uLWNhbm9uaWNhbCBnYXAgb3BlbiBwZW5hbHR5IChpbiBhZGRpdGlvbiB0byAtLXNjb3JlR2FwKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItOCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTY29yaW5nIiwKICAgICJsYWJlbCIgOiAiTm9uLWNhbm9uaWNhbCBnYXAgb3BlbiIKICB9LCB7CiAgICAiaWQiIDogIiNzY29yZUdhcEdDQUciLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zY29yZUdhcEdDQUciLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkdDL0FHIGFuZCBDVC9HQyBnYXAgb3BlbiBwZW5hbHR5IChpbiBhZGRpdGlvbiB0byAtLXNjb3JlR2FwKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItNCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTY29yaW5nIiwKICAgICJsYWJlbCIgOiAiR0MvQUcgYW5kIENUL0dDIGdhcCBvcGVuIgogIH0sIHsKICAgICJpZCIgOiAiI3Njb3JlR2FwQVRBQyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNjb3JlR2FwQVRBQyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQVQvQUMgYW5kIEdUL0FUIGdhcCBvcGVuIHBlbmFsdHkgKGluIGFkZGl0aW9uIHRvIC0tc2NvcmVHYXApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi04IiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNjb3JpbmciLAogICAgImxhYmVsIiA6ICJBVC9BQyBhbmQgR1QvQVQgZ2FwIG9wZW4iCiAgfSwgewogICAgImlkIiA6ICIjc2NvcmVHYXAiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zY29yZUdhcCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiR2FwIG9wZW4gcGVuYWx0eS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNjb3JpbmciLAogICAgImxhYmVsIiA6ICJHYXAgb3BlbiBwZW5hbHR5IgogIH0sIHsKICAgICJpZCIgOiAiI3Njb3JlRGVsT3BlbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNjb3JlRGVsT3BlbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiRGVsZXRpb24gb3BlbiBwZW5hbHR5LiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi0yIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNjb3JpbmciLAogICAgImxhYmVsIiA6ICJEZWxldGlvbiBvcGVuIHBlbmFsdHkiCiAgfSwgewogICAgImlkIiA6ICIjc2NvcmVEZWxCYXNlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2NvcmVEZWxCYXNlIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJEZWxldGlvbiBleHRlbnNpb24gcGVuYWx0eSBwZXIgYmFzZSAoaW4gYWRkaXRpb24gdG8gLS1zY29yZURlbE9wZW4pLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi0yIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNjb3JpbmciLAogICAgImxhYmVsIiA6ICJEZWxldGlvbiBleHRlbnNpb24gcGVuYWx0eSIKICB9LCB7CiAgICAiaWQiIDogIiNyZ19zZXFfY2VudGVyIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAic3RyaW5nIiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJTcGVjaWZ5IHRoZSBzZXF1ZW5jaW5nIGNlbnRlciBmb3IgUkcgbGluZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJJbmZlcnJlZCBmcm9tIG1ldGFkYXRhIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgZ3JvdXAiLAogICAgImxhYmVsIiA6ICJTZXF1ZW5jaW5nIGNlbnRlciIKICB9LCB7CiAgICAiaWQiIDogIiNyZ19zYW1wbGVfaWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIlNwZWNpZnkgdGhlIHNhbXBsZSBJRCBmb3IgUkcgbGluZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJJbmZlcnJlZCBmcm9tIG1ldGFkYXRhIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgZ3JvdXAiLAogICAgImxhYmVsIiA6ICJTYW1wbGUgSUQiCiAgfSwgewogICAgImlkIiA6ICIjcmdfcGxhdGZvcm1fdW5pdF9pZCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgInN0cmluZyIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiU3BlY2lmeSB0aGUgcGxhdGZvcm0gdW5pdCBJRCBmb3IgUkcgbGluZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJJbmZlcnJlZCBmcm9tIG1ldGFkYXRhIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgZ3JvdXAiLAogICAgImxhYmVsIiA6ICJQbGF0Zm9ybSB1bml0IElEIgogIH0sIHsKICAgICJpZCIgOiAiI3JnX3BsYXRmb3JtIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJyZ19wbGF0Zm9ybSIsCiAgICAgICJzeW1ib2xzIiA6IFsgIkxTIDQ1NCIsICJIZWxpY29zIiwgIklsbHVtaW5hIiwgIkFCSSBTT0xpRCIsICJJb24gVG9ycmVudCBQR00iLCAiUGFjQmlvIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiU3BlY2lmeSB0aGUgdmVyc2lvbiBvZiB0aGUgdGVjaG5vbG9neSB0aGF0IHdhcyB1c2VkIGZvciBzZXF1ZW5jaW5nIG9yIGFzc2F5aW5nLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIkluZmVycmVkIGZyb20gbWV0YWRhdGEiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiUmVhZCBncm91cCIsCiAgICAibGFiZWwiIDogIlBsYXRmb3JtIgogIH0sIHsKICAgICJpZCIgOiAiI3JnX21mbCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgInN0cmluZyIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiU3BlY2lmeSB0aGUgbWVkaWFuIGZyYWdtZW50IGxlbmd0aCBmb3IgUkcgbGluZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJJbmZlcnJlZCBmcm9tIG1ldGFkYXRhIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgZ3JvdXAiLAogICAgImxhYmVsIiA6ICJNZWRpYW4gZnJhZ21lbnQgbGVuZ3RoIgogIH0sIHsKICAgICJpZCIgOiAiI3JnX2xpYnJhcnlfaWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIlNwZWNpZnkgdGhlIGxpYnJhcnkgSUQgZm9yIFJHIGxpbmUuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiSW5mZXJyZWQgZnJvbSBtZXRhZGF0YSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIGdyb3VwIiwKICAgICJsYWJlbCIgOiAiTGlicmFyeSBJRCIKICB9LCB7CiAgICAiaWQiIDogIiNyZWFkcyIsCiAgICAidHlwZSIgOiBbIHsKICAgICAgIml0ZW1zIiA6ICJGaWxlIiwKICAgICAgIm5hbWUiIDogInJlYWRzIiwKICAgICAgInR5cGUiIDogImFycmF5IgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJpdGVtU2VwYXJhdG9yIiA6ICIgIiwKICAgICAgInBvc2l0aW9uIiA6IDEwLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAgICJ2YWx1ZUZyb20iIDogewogICAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAgICJzY3JpcHQiIDogIntcbiAgdmFyIGxpc3QgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpXG4gIHZhciBhbGxfc2FtcGxlcyA9IFtdXG4gIFxuICBnZXRVbmlxdWUgPSBmdW5jdGlvbihhcnIpe1xuICAgIHZhciB1ID0ge30sIGEgPSBbXTtcbiAgICBmb3IodmFyIGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7ICsraSl7XG4gICAgICBpZih1Lmhhc093blByb3BlcnR5KGFycltpXSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBhLnB1c2goYXJyW2ldKTtcbiAgICAgIHVbYXJyW2ldXSA9IDE7XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG4gICAgXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxpc3QubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgaWYgKGxpc3RbaW5kZXhdLm1ldGFkYXRhICE9IG51bGwpe1xuICAgICAgYWxsX3NhbXBsZXMucHVzaChsaXN0W2luZGV4XS5tZXRhZGF0YS5zYW1wbGVfaWQpXG4gICAgfVxuICB9XG4gIHNhbXBsZXMgPSBnZXRVbmlxdWUoYWxsX3NhbXBsZXMpXG4gIFxuICB2YXIgc2FtcGxlc19naXZlbiA9IGFsbF9zYW1wbGVzLmxlbmd0aCA9PSBsaXN0Lmxlbmd0aFxuICBcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGlzdC5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICBpZiAobGlzdFtpbmRleF0ubWV0YWRhdGEgIT0gbnVsbCl7XG4gICAgICBhbGxfc2FtcGxlcy5wdXNoKGxpc3RbaW5kZXhdLm1ldGFkYXRhLnNhbXBsZV9pZClcbiAgICB9XG4gIH1cbiAgc2FtcGxlcyA9IGdldFVuaXF1ZShhbGxfc2FtcGxlcylcbiAgdmFyIHJlc3AgPSBbXVxuICBcbiAgaWYgKGxpc3QubGVuZ3RoID09IDEpe1xuICAgIHJlc3AucHVzaChsaXN0WzBdLnBhdGgpXG4gICAgXG4gIH1lbHNlIGlmIChsaXN0Lmxlbmd0aCA9PSAyKXsgICAgXG4gICAgXG4gICAgbGVmdCA9IFwiXCJcbiAgICByaWdodCA9IFwiXCJcbiAgICAgIFxuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxpc3QubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICBcbiAgICAgIGlmIChsaXN0W2luZGV4XS5tZXRhZGF0YSAhPSBudWxsKXtcbiAgICAgICAgaWYgKGxpc3RbaW5kZXhdLm1ldGFkYXRhLnBhaXJlZF9lbmQgPT0gMSl7XG4gICAgICAgICAgbGVmdCA9IGxpc3RbaW5kZXhdLnBhdGhcbiAgICAgICAgfWVsc2UgaWYgKGxpc3RbaW5kZXhdLm1ldGFkYXRhLnBhaXJlZF9lbmQgPT0gMil7XG4gICAgICAgICAgcmlnaHQgPSBsaXN0W2luZGV4XS5wYXRoXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKGxlZnQgIT0gXCJcIiAmJiByaWdodCAhPSBcIlwiKXsgICAgICBcbiAgICAgIHJlc3AucHVzaChsZWZ0KVxuICAgICAgcmVzcC5wdXNoKHJpZ2h0KVxuICAgIH1cbiAgfVxuICBlbHNlIGlmIChsaXN0Lmxlbmd0aCA+IDIpe1xuICAgIGxlZnQgPSBbXVxuICAgIHJpZ2h0ID0gW11cbiAgICBpZiAoc2FtcGxlc19naXZlbil7XG4gICAgICBmb3IgKHNhbXBsZV9pbmQgPSAwOyBzYW1wbGVfaW5kIDwgc2FtcGxlcy5sZW5ndGg7ICsrc2FtcGxlX2luZCl7XG4gICAgICAgIGZvciAocmVhZF9pbmQgPSAwOyByZWFkX2luZCA8IGxpc3QubGVuZ3RoOyArK3JlYWRfaW5kKXtcbiAgICAgICAgICBpZiAobGlzdFtyZWFkX2luZF0ubWV0YWRhdGEgIT0gbnVsbCl7XG4gICAgICAgICAgICBpZiAobGlzdFtyZWFkX2luZF0ubWV0YWRhdGEucGFpcmVkX2VuZCA9PSAxICYmIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnNhbXBsZV9pZCA9PSBzYW1wbGVzW3NhbXBsZV9pbmRdKXtcbiAgICAgICAgICAgICAgbGVmdC5wdXNoKGxpc3RbcmVhZF9pbmRdLnBhdGgpXG4gICAgICAgICAgICB9ZWxzZSBpZiAobGlzdFtyZWFkX2luZF0ubWV0YWRhdGEucGFpcmVkX2VuZCA9PSAyICYmIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnNhbXBsZV9pZCA9PSBzYW1wbGVzW3NhbXBsZV9pbmRdKXtcbiAgICAgICAgICAgICAgcmlnaHQucHVzaChsaXN0W3JlYWRfaW5kXS5wYXRoKX1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsaXN0Lmxlbmd0aDsgKytpbmRleCkge1xuXG4gICAgICAgICAgaWYgKGxpc3RbaW5kZXhdLm1ldGFkYXRhICE9IG51bGwpe1xuICAgICAgICAgICAgaWYgKGxpc3RbaW5kZXhdLm1ldGFkYXRhLnBhaXJlZF9lbmQgPT0gMSl7XG4gICAgICAgICAgICAgIGxlZnQucHVzaChsaXN0W2luZGV4XS5wYXRoKVxuICAgICAgICAgICAgfWVsc2UgaWYgKGxpc3RbaW5kZXhdLm1ldGFkYXRhLnBhaXJlZF9lbmQgPT0gMil7XG4gICAgICAgICAgICAgIHJpZ2h0LnB1c2gobGlzdFtpbmRleF0ucGF0aClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGxlZnRfam9pbiA9IGxlZnQuam9pbigpXG4gICAgcmlnaHRfam9pbiA9IHJpZ2h0LmpvaW4oKVxuICAgIGlmIChsZWZ0ICE9IFtdICYmIHJpZ2h0ICE9IFtdKXsgICAgICBcbiAgICAgIHJlc3AucHVzaChsZWZ0X2pvaW4pXG4gICAgICByZXNwLnB1c2gocmlnaHRfam9pbilcbiAgICB9XG4gICAgfVxuICBcbiAgaWYocmVzcC5sZW5ndGggPiAwKXsgICAgXG4gICAgcmV0dXJuIFwiLS1yZWFkRmlsZXNJbiBcIi5jb25jYXQocmVzcC5qb2luKFwiIFwiKSlcbiAgfVxufSIKICAgICAgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiUmVhZCBzZXF1ZW5jZS4gSW4gY2FzZSBvZiBwYWlyZWQtZW5kIGFsaWdubWVudCBpdCBpcyBjcnVjaWFsIHRvIHNldCBtZXRhZGF0YSAncGFpcmVkLWVuZCcgZmllbGQgdG8gMS8yLiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJCYXNpYyIsCiAgICAibGFiZWwiIDogIlJlYWQgc2VxdWVuY2UiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIkZBU1RBLCBGQVNUUSwgRkEsIEZRLCBGQVNUUS5HWiwgRlEuR1osIEZBU1RRLkJaMiwgRlEuQloyIiwKICAgICJyZXF1aXJlZCIgOiB0cnVlCiAgfSwgewogICAgImlkIiA6ICIjcmVhZE1hdGVzTGVuZ3Roc0luIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJyZWFkTWF0ZXNMZW5ndGhzSW4iLAogICAgICAic3ltYm9scyIgOiBbICJOb3RFcXVhbCIsICJFcXVhbCIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1yZWFkTWF0ZXNMZW5ndGhzSW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkVxdWFsL05vdCBlcXVhbCAtIGxlbmd0aHMgb2YgbmFtZXMsIHNlcXVlbmNlcywgcXVhbGl0aWVzIGZvciBib3RoIG1hdGVzIGFyZSB0aGUgc2FtZS9ub3QgdGhlIHNhbWUuIFwiTm90IGVxdWFsXCIgaXMgc2FmZSBpbiBhbGwgc2l0dWF0aW9ucy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJOb3RFcXVhbCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIHBhcmFtZXRlcnMiLAogICAgImxhYmVsIiA6ICJSZWFkcyBsZW5ndGhzIgogIH0sIHsKICAgICJpZCIgOiAiI3JlYWRNYXBOdW1iZXIiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1yZWFkTWFwTnVtYmVyIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJOdW1iZXIgb2YgcmVhZHMgdG8gbWFwIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgZmlsZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItMSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIHBhcmFtZXRlcnMiLAogICAgImxhYmVsIiA6ICJSZWFkcyB0byBtYXAiCiAgfSwgewogICAgImlkIiA6ICIjcXVhbnRUcmFuc2NyaXB0b21lQmFuIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJxdWFudFRyYW5zY3JpcHRvbWVCYW4iLAogICAgICAic3ltYm9scyIgOiBbICJJbmRlbFNvZnRjbGlwU2luZ2xlZW5kIiwgIlNpbmdsZWVuZCIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1xdWFudFRyYW5zY3JpcHRvbWVCYW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlByb2hpYml0IHZhcmlvdXMgYWxpZ25tZW50IHR5cGUuIEluZGVsU29mdGNsaXBTaW5nbGVlbmQ6IHByb2hpYml0IGluZGVscywgc29mdCBjbGlwcGluZyBhbmQgc2luZ2xlLWVuZCBhbGlnbm1lbnRzIC0gY29tcGF0aWJsZSB3aXRoIFJTRU07IFNpbmdsZWVuZDogcHJvaGliaXQgc2luZ2xlLWVuZCBhbGlnbm1lbnRzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIkluZGVsU29mdGNsaXBTaW5nbGVlbmQiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiUXVhbnRpZmljYXRpb24gb2YgQW5ub3RhdGlvbnMiLAogICAgImxhYmVsIiA6ICJQcm9oaWJpdCBhbGlnbm1lbnQgdHlwZSIKICB9LCB7CiAgICAiaWQiIDogIiNxdWFudE1vZGUiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogInF1YW50TW9kZSIsCiAgICAgICJzeW1ib2xzIiA6IFsgIlRyYW5zY3JpcHRvbWVTQU0iLCAiR2VuZUNvdW50cyIsICJUcmFuc2NyaXB0b21lU0FNIEdlbmVDb3VudHMiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJUeXBlcyBvZiBxdWFudGlmaWNhdGlvbiByZXF1ZXN0ZWQuICdUcmFuc2NyaXB0b21lU0FNJyBvcHRpb24gb3V0cHV0cyBTQU0vQkFNIGFsaWdubWVudHMgdG8gdHJhbnNjcmlwdG9tZSBpbnRvIGEgc2VwYXJhdGUgZmlsZS4gV2l0aCAnR2VuZUNvdW50cycgb3B0aW9uLCBTVEFSIHdpbGwgY291bnQgbnVtYmVyIG9mIHJlYWRzIHBlciBnZW5lIHdoaWxlIG1hcHBpbmcuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiLSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJRdWFudGlmaWNhdGlvbiBvZiBBbm5vdGF0aW9ucyIsCiAgICAibGFiZWwiIDogIlF1YW50aWZpY2F0aW9uIG1vZGUiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U29ydGluZ1R5cGUiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFNvcnRpbmdUeXBlIiwKICAgICAgInN5bWJvbHMiIDogWyAiVW5zb3J0ZWQiLCAiU29ydGVkQnlDb29yZGluYXRlIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiVHlwZSBvZiBvdXRwdXQgc29ydGluZy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJVbnNvcnRlZCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJPdXRwdXQgc29ydGluZyB0eXBlIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNKZmlsdGVyUmVhZHMiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFNKZmlsdGVyUmVhZHMiLAogICAgICAic3ltYm9scyIgOiBbICJBbGwiLCAiVW5pcXVlIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNKZmlsdGVyUmVhZHMiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIldoaWNoIHJlYWRzIHRvIGNvbnNpZGVyIGZvciBjb2xsYXBzZWQgc3BsaWNlIGp1bmN0aW9ucyBvdXRwdXQuIEFsbDogYWxsIHJlYWRzLCB1bmlxdWUtIGFuZCBtdWx0aS1tYXBwZXJzOyBVbmlxdWU6IHVuaXF1ZWx5IG1hcHBpbmcgcmVhZHMgb25seS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJBbGwiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZzogc3BsaWNlIGp1bmN0aW9ucyIsCiAgICAibGFiZWwiIDogIkNvbGxhcHNlZCBqdW5jdGlvbnMgcmVhZHMiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0pmaWx0ZXJPdmVyaGFuZ01pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogImludCIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAiaXRlbVNlcGFyYXRvciIgOiAiICIsCiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0pmaWx0ZXJPdmVyaGFuZ01pbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSBvdmVyaGFuZyBsZW5ndGggZm9yIHNwbGljZSBqdW5jdGlvbnMgb24gYm90aCBzaWRlcyBmb3IgZWFjaCBvZiB0aGUgbW90aWZzLiBUbyBzZXQgbm8gb3V0cHV0IGZvciBkZXNpcmVkIG1vdGlmLCBhc3NpZ24gLTEgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZmllbGQuIERvZXMgbm90IGFwcGx5IHRvIGFubm90YXRlZCBqdW5jdGlvbnMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMzAgMTIgMTIgMTIiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZzogc3BsaWNlIGp1bmN0aW9ucyIsCiAgICAibGFiZWwiIDogIk1pbiBvdmVyaGFuZyBTSiIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTSmZpbHRlckludHJvbk1heFZzUmVhZE4iLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIml0ZW1zIiA6ICJpbnQiLAogICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgIml0ZW1TZXBhcmF0b3IiIDogIiAiLAogICAgICAicHJlZml4IiA6ICItLW91dFNKZmlsdGVySW50cm9uTWF4VnNSZWFkTiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4aW11bSBnYXAgYWxsb3dlZCBmb3IganVuY3Rpb25zIHN1cHBvcnRlZCBieSAxLDIsMy4uLk4gcmVhZHMgKGludCA+PSAwKSBpLmUuIGJ5IGRlZmF1bHQganVuY3Rpb25zIHN1cHBvcnRlZCBieSAxIHJlYWQgY2FuIGhhdmUgZ2FwcyA8PTUwMDAwYiwgYnkgMiByZWFkczogPD0xMDAwMDBiLCBieSAzIHJlYWRzOiA8PTIwMDAwMC4gQnkgNCBvciBtb3JlIHJlYWRzOiBhbnkgZ2FwIDw9YWxpZ25JbnRyb25NYXguIERvZXMgbm90IGFwcGx5IHRvIGFubm90YXRlZCBqdW5jdGlvbnMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiNTAwMDAgMTAwMDAwIDIwMDAwMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nOiBzcGxpY2UganVuY3Rpb25zIiwKICAgICJsYWJlbCIgOiAiTWF4IGdhcCBhbGxvd2VkIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNKZmlsdGVyRGlzdFRvT3RoZXJTSm1pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogImludCIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAiaXRlbVNlcGFyYXRvciIgOiAiICIsCiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0pmaWx0ZXJEaXN0VG9PdGhlclNKbWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIGFsbG93ZWQgZGlzdGFuY2UgdG8gb3RoZXIganVuY3Rpb25zJyBkb25vci9hY2NlcHRvciBmb3IgZWFjaCBvZiB0aGUgbW90aWZzIChpbnQgPj0gMCkuIERvZXMgbm90IGFwcGx5IHRvIGFubm90YXRlZCBqdW5jdGlvbnMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMTAgMCA1IDEwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmc6IHNwbGljZSBqdW5jdGlvbnMiLAogICAgImxhYmVsIiA6ICJNaW4gZGlzdGFuY2UgdG8gb3RoZXIgZG9ub3IvYWNjZXB0b3IiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0pmaWx0ZXJDb3VudFVuaXF1ZU1pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogImludCIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAiaXRlbVNlcGFyYXRvciIgOiAiICIsCiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0pmaWx0ZXJDb3VudFVuaXF1ZU1pbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSB1bmlxdWVseSBtYXBwaW5nIHJlYWQgY291bnQgcGVyIGp1bmN0aW9uIGZvciBlYWNoIG9mIHRoZSBtb3RpZnMuIFRvIHNldCBubyBvdXRwdXQgZm9yIGRlc2lyZWQgbW90aWYsIGFzc2lnbiAtMSB0byB0aGUgY29ycmVzcG9uZGluZyBmaWVsZC4gSnVuY3Rpb25zIGFyZSBvdXRwdXQgaWYgb25lIG9mIC0tb3V0U0pmaWx0ZXJDb3VudFVuaXF1ZU1pbiBPUiAtLW91dFNKZmlsdGVyQ291bnRUb3RhbE1pbiBjb25kaXRpb25zIGFyZSBzYXRpc2ZpZWQuIERvZXMgbm90IGFwcGx5IHRvIGFubm90YXRlZCBqdW5jdGlvbnMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMyAxIDEgMSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nOiBzcGxpY2UganVuY3Rpb25zIiwKICAgICJsYWJlbCIgOiAiTWluIHVuaXF1ZSBjb3VudCIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTSmZpbHRlckNvdW50VG90YWxNaW4iLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIml0ZW1zIiA6ICJpbnQiLAogICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgIml0ZW1TZXBhcmF0b3IiIDogIiAiLAogICAgICAicHJlZml4IiA6ICItLW91dFNKZmlsdGVyQ291bnRUb3RhbE1pbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSB0b3RhbCAobXVsdGktbWFwcGluZyt1bmlxdWUpIHJlYWQgY291bnQgcGVyIGp1bmN0aW9uIGZvciBlYWNoIG9mIHRoZSBtb3RpZnMuIFRvIHNldCBubyBvdXRwdXQgZm9yIGRlc2lyZWQgbW90aWYsIGFzc2lnbiAtMSB0byB0aGUgY29ycmVzcG9uZGluZyBmaWVsZC4gSnVuY3Rpb25zIGFyZSBvdXRwdXQgaWYgb25lIG9mIC0tb3V0U0pmaWx0ZXJDb3VudFVuaXF1ZU1pbiBPUiAtLW91dFNKZmlsdGVyQ291bnRUb3RhbE1pbiBjb25kaXRpb25zIGFyZSBzYXRpc2ZpZWQuIERvZXMgbm90IGFwcGx5IHRvIGFubm90YXRlZCBqdW5jdGlvbnMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMyAxIDEgMSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nOiBzcGxpY2UganVuY3Rpb25zIiwKICAgICJsYWJlbCIgOiAiTWluIHRvdGFsIGNvdW50IgogIH0sIHsKICAgICJpZCIgOiAiI291dFNBTXVubWFwcGVkIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJvdXRTQU11bm1hcHBlZCIsCiAgICAgICJzeW1ib2xzIiA6IFsgIk5vbmUiLCAiV2l0aGluIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTXVubWFwcGVkIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJPdXRwdXQgb2YgdW5tYXBwZWQgcmVhZHMgaW4gdGhlIFNBTSBmb3JtYXQuIE5vbmU6IG5vIG91dHB1dCBXaXRoaW46IG91dHB1dCB1bm1hcHBlZCByZWFkcyB3aXRoaW4gdGhlIG1haW4gU0FNIGZpbGUgKGkuZS4gQWxpZ25lZC5vdXQuc2FtKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJOb25lIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIldyaXRlIHVubWFwcGVkIGluIFNBTSIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTQU10eXBlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJvdXRTQU10eXBlIiwKICAgICAgInN5bWJvbHMiIDogWyAiU0FNIiwgIkJBTSIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAic2NyaXB0IiA6ICJ7XG4gIFNBTV90eXBlID0gJGpvYi5pbnB1dHMub3V0U0FNdHlwZVxuICBTT1JUX3R5cGUgPSAkam9iLmlucHV0cy5vdXRTb3J0aW5nVHlwZVxuICBpZiAoU0FNX3R5cGUgJiYgU09SVF90eXBlKSB7XG4gICAgcmV0dXJuIFwiLS1vdXRTQU10eXBlIFwiLmNvbmNhdChTQU1fdHlwZSwgXCIgXCIsIFNPUlRfdHlwZSlcbiAgfSBlbHNlIGlmIChTQU1fdHlwZSAmJiBTT1JUX3R5cGUgPT0gbnVsbCkge1xuICAgIHJldHVybiBcIi0tb3V0U0FNdHlwZSBcIi5jb25jYXQoU0FNX3R5cGUsIFwiIFVuc29ydGVkXCIpXG4gIH1cbn0iCiAgICAgIH0KICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkZvcm1hdCBvZiBvdXRwdXQgYWxpZ25tZW50cy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJTQU0iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiT3V0cHV0IGZvcm1hdCIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTQU1zdHJhbmRGaWVsZCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAib3V0U0FNc3RyYW5kRmllbGQiLAogICAgICAic3ltYm9scyIgOiBbICJOb25lIiwgImludHJvbk1vdGlmIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTXN0cmFuZEZpZWxkIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJDdWZmbGlua3MtbGlrZSBzdHJhbmQgZmllbGQgZmxhZy4gTm9uZTogbm90IHVzZWQ7IGludHJvbk1vdGlmOiBzdHJhbmQgZGVyaXZlZCBmcm9tIHRoZSBpbnRyb24gbW90aWYuIFJlYWRzIHdpdGggaW5jb25zaXN0ZW50IGFuZC9vciBub24tY2Fub25pY2FsIGludHJvbnMgYXJlIGZpbHRlcmVkIG91dC4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJOb25lIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIlN0cmFuZCBmaWVsZCBmbGFnIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNBTXJlYWRJRCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAib3V0U0FNcmVhZElEIiwKICAgICAgInN5bWJvbHMiIDogWyAiU3RhbmRhcmQiLCAiTnVtYmVyIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTXJlYWRJRCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiUmVhZCBJRCByZWNvcmQgdHlwZS4gU3RhbmRhcmQ6IGZpcnN0IHdvcmQgKHVudGlsIHNwYWNlKSBmcm9tIHRoZSBGQVNUeCByZWFkIElEIGxpbmUsIHJlbW92aW5nIC8xLC8yIGZyb20gdGhlIGVuZDsgTnVtYmVyOiByZWFkIG51bWJlciAoaW5kZXgpIGluIHRoZSBGQVNUeCBmaWxlLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIlN0YW5kYXJkIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIlJlYWQgSUQiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNcHJpbWFyeUZsYWciLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFNBTXByaW1hcnlGbGFnIiwKICAgICAgInN5bWJvbHMiIDogWyAiT25lQmVzdFNjb3JlIiwgIkFsbEJlc3RTY29yZSIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1wcmltYXJ5RmxhZyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiV2hpY2ggYWxpZ25tZW50cyBhcmUgY29uc2lkZXJlZCBwcmltYXJ5IC0gYWxsIG90aGVycyB3aWxsIGJlIG1hcmtlZCB3aXRoIDB4MTAwIGJpdCBpbiB0aGUgRkxBRy4gT25lQmVzdFNjb3JlOiBvbmx5IG9uZSBhbGlnbm1lbnQgd2l0aCB0aGUgYmVzdCBzY29yZSBpcyBwcmltYXJ5OyBBbGxCZXN0U2NvcmU6IGFsbCBhbGlnbm1lbnRzIHdpdGggdGhlIGJlc3Qgc2NvcmUgYXJlIHByaW1hcnkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiT25lQmVzdFNjb3JlIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIlByaW1hcnkgYWxpZ25tZW50cyIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTQU1vcmRlciIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAib3V0U0FNb3JkZXIiLAogICAgICAic3ltYm9scyIgOiBbICJQYWlyZWQiLCAiUGFpcmVkS2VlcElucHV0T3JkZXIiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0FNb3JkZXIiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlR5cGUgb2Ygc29ydGluZyBmb3IgdGhlIFNBTSBvdXRwdXQuIFBhaXJlZDogb25lIG1hdGUgYWZ0ZXIgdGhlIG90aGVyIGZvciBhbGwgcGFpcmVkIGFsaWdubWVudHM7IFBhaXJlZEtlZXBJbnB1dE9yZGVyOiBvbmUgbWF0ZSBhZnRlciB0aGUgb3RoZXIgZm9yIGFsbCBwYWlyZWQgYWxpZ25tZW50cywgdGhlIG9yZGVyIGlzIGtlcHQgdGhlIHNhbWUgYXMgaW4gdGhlIGlucHV0IEZBU1RRIGZpbGVzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIlBhaXJlZCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJTb3J0aW5nIGluIFNBTSIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTQU1tb2RlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJvdXRTQU1tb2RlIiwKICAgICAgInN5bWJvbHMiIDogWyAiRnVsbCIsICJOb1FTIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTW1vZGUiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1vZGUgb2YgU0FNIG91dHB1dC4gRnVsbDogZnVsbCBTQU0gb3V0cHV0OyBOb1FTOiBmdWxsIFNBTSBidXQgd2l0aG91dCBxdWFsaXR5IHNjb3Jlcy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJGdWxsIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIlNBTSBtb2RlIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNBTW1hcHFVbmlxdWUiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1tYXBxVW5pcXVlIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNQVBRIHZhbHVlIGZvciB1bmlxdWUgbWFwcGVycyAoMCB0byAyNTUpLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjI1NSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJNQVBRIHZhbHVlIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNBTWhlYWRlclBHIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAic3RyaW5nIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0FNaGVhZGVyUEciLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkV4dHJhIEBQRyAoc29mdHdhcmUpIGxpbmUgb2YgdGhlIFNBTSBoZWFkZXIgKGluIGFkZGl0aW9uIHRvIFNUQVIpLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi0iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiU0FNIGhlYWRlciBAUEciCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNaGVhZGVySEQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1oZWFkZXJIRCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQEhEIChoZWFkZXIpIGxpbmUgb2YgdGhlIFNBTSBoZWFkZXIuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiLSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJTQU0gaGVhZGVyIEBIRCIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTQU1mbGFnT1IiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1mbGFnT1IiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlNldCBzcGVjaWZpYyBiaXRzIG9mIHRoZSBTQU0gRkxBRy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIk9SIFNBTSBmbGFnIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNBTWZsYWdBTkQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1mbGFnQU5EIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJTZXQgc3BlY2lmaWMgYml0cyBvZiB0aGUgU0FNIEZMQUcuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiNjU1MzUiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiQU5EIFNBTSBmbGFnIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNBTWF0dHJpYnV0ZXMiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFNBTWF0dHJpYnV0ZXMiLAogICAgICAic3ltYm9scyIgOiBbICJTdGFuZGFyZCIsICJOSCIsICJBbGwiLCAiTm9uZSIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1hdHRyaWJ1dGVzIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJEZXNpcmVkIFNBTSBhdHRyaWJ1dGVzLCBpbiB0aGUgb3JkZXIgZGVzaXJlZCBmb3IgdGhlIG91dHB1dCBTQU0uIE5IOiBhbnkgY29tYmluYXRpb24gaW4gYW55IG9yZGVyOyBTdGFuZGFyZDogTkggSEkgQVMgbk07IEFsbDogTkggSEkgQVMgbk0gTk0gTUQgak0gakk7IE5vbmU6IG5vIGF0dHJpYnV0ZXMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiU3RhbmRhcmQiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiU0FNIGF0dHJpYnV0ZXMiCiAgfSwgewogICAgImlkIiA6ICIjb3V0UmVhZHNVbm1hcHBlZCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAib3V0UmVhZHNVbm1hcHBlZCIsCiAgICAgICJzeW1ib2xzIiA6IFsgIk5vbmUiLCAiRmFzdHgiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0UmVhZHNVbm1hcHBlZCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiT3V0cHV0IG9mIHVubWFwcGVkIHJlYWRzIChiZXNpZGVzIFNBTSkuIE5vbmU6IG5vIG91dHB1dDsgRmFzdHg6IG91dHB1dCBpbiBzZXBhcmF0ZSBmYXN0YS9mYXN0cSBmaWxlcywgVW5tYXBwZWQub3V0Lm1hdGUxLzIuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiTm9uZSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJPdXRwdXQgdW5tYXBwZWQgcmVhZHMiCiAgfSwgewogICAgImlkIiA6ICIjb3V0UVNjb252ZXJzaW9uQWRkIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0UVNjb252ZXJzaW9uQWRkIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJBZGQgdGhpcyBudW1iZXIgdG8gdGhlIHF1YWxpdHkgc2NvcmUgKGUuZy4gdG8gY29udmVydCBmcm9tIElsbHVtaW5hIHRvIFNhbmdlciwgdXNlIC0zMSkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJRdWFsaXR5IGNvbnZlcnNpb24iCiAgfSwgewogICAgImlkIiA6ICIjb3V0RmlsdGVyVHlwZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAib3V0RmlsdGVyVHlwZSIsCiAgICAgICJzeW1ib2xzIiA6IFsgIk5vcm1hbCIsICJCeVNKb3V0IiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dEZpbHRlclR5cGUiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlR5cGUgb2YgZmlsdGVyaW5nLiBOb3JtYWw6IHN0YW5kYXJkIGZpbHRlcmluZyB1c2luZyBvbmx5IGN1cnJlbnQgYWxpZ25tZW50OyBCeVNKb3V0OiBrZWVwIG9ubHkgdGhvc2UgcmVhZHMgdGhhdCBjb250YWluIGp1bmN0aW9ucyB0aGF0IHBhc3NlZCBmaWx0ZXJpbmcgaW50byBTSi5vdXQudGFiLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIk5vcm1hbCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nIiwKICAgICJsYWJlbCIgOiAiRmlsdGVyaW5nIHR5cGUiCiAgfSwgewogICAgImlkIiA6ICIjb3V0RmlsdGVyU2NvcmVNaW5PdmVyTHJlYWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJmbG9hdCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dEZpbHRlclNjb3JlTWluT3ZlckxyZWFkIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICInTWluaW11bSBzY29yZScgbm9ybWFsaXplZCB0byByZWFkIGxlbmd0aCAoc3VtIG9mIG1hdGVzJyBsZW5ndGhzIGZvciBwYWlyZWQtZW5kIHJlYWRzKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwLjY2IiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmciLAogICAgImxhYmVsIiA6ICJNaW4gc2NvcmUgbm9ybWFsaXplZCIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRGaWx0ZXJTY29yZU1pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dEZpbHRlclNjb3JlTWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJBbGlnbm1lbnQgd2lsbCBiZSBvdXRwdXQgb25seSBpZiBpdHMgc2NvcmUgaXMgaGlnaGVyIHRoYW4gdGhpcyB2YWx1ZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmciLAogICAgImxhYmVsIiA6ICJNaW4gc2NvcmUiCiAgfSwgewogICAgImlkIiA6ICIjb3V0RmlsdGVyTXVsdGltYXBTY29yZVJhbmdlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0RmlsdGVyTXVsdGltYXBTY29yZVJhbmdlIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgc2NvcmUgcmFuZ2UgYmVsb3cgdGhlIG1heGltdW0gc2NvcmUgZm9yIG11bHRpbWFwcGluZyBhbGlnbm1lbnRzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZyIsCiAgICAibGFiZWwiIDogIk11bHRpbWFwcGluZyBzY29yZSByYW5nZSIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRGaWx0ZXJNdWx0aW1hcE5tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRGaWx0ZXJNdWx0aW1hcE5tYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlJlYWQgYWxpZ25tZW50cyB3aWxsIGJlIG91dHB1dCBvbmx5IGlmIHRoZSByZWFkIG1hcHMgZmV3ZXIgdGhhbiB0aGlzIHZhbHVlLCBvdGhlcndpc2Ugbm8gYWxpZ25tZW50cyB3aWxsIGJlIG91dHB1dC4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IG51bWJlciBvZiBtYXBwaW5ncyIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRGaWx0ZXJNaXNtYXRjaE5vdmVyUmVhZExtYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJmbG9hdCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dEZpbHRlck1pc21hdGNoTm92ZXJSZWFkTG1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWxpZ25tZW50IHdpbGwgYmUgb3V0cHV0IG9ubHkgaWYgaXRzIHJhdGlvIG9mIG1pc21hdGNoZXMgdG8gKnJlYWQqIGxlbmd0aCBpcyBsZXNzIHRoYW4gdGhpcyB2YWx1ZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmciLAogICAgImxhYmVsIiA6ICJNaXNtYXRjaGVzIHRvICpyZWFkKiBsZW5ndGgiCiAgfSwgewogICAgImlkIiA6ICIjb3V0RmlsdGVyTWlzbWF0Y2hOb3ZlckxtYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJmbG9hdCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dEZpbHRlck1pc21hdGNoTm92ZXJMbWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJBbGlnbm1lbnQgd2lsbCBiZSBvdXRwdXQgb25seSBpZiBpdHMgcmF0aW8gb2YgbWlzbWF0Y2hlcyB0byAqbWFwcGVkKiBsZW5ndGggaXMgbGVzcyB0aGFuIHRoaXMgdmFsdWUuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMC4zIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmciLAogICAgImxhYmVsIiA6ICJNaXNtYXRjaGVzIHRvICptYXBwZWQqIGxlbmd0aCIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRGaWx0ZXJNaXNtYXRjaE5tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRGaWx0ZXJNaXNtYXRjaE5tYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkFsaWdubWVudCB3aWxsIGJlIG91dHB1dCBvbmx5IGlmIGl0IGhhcyBmZXdlciBtaXNtYXRjaGVzIHRoYW4gdGhpcyB2YWx1ZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IG51bWJlciBvZiBtaXNtYXRjaGVzIgogIH0sIHsKICAgICJpZCIgOiAiI291dEZpbHRlck1hdGNoTm1pbk92ZXJMcmVhZCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImZsb2F0IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0RmlsdGVyTWF0Y2hObWluT3ZlckxyZWFkIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICInTWluaW11bSBtYXRjaGVkIGJhc2VzJyBub3JtYWxpemVkIHRvIHJlYWQgbGVuZ3RoIChzdW0gb2YgbWF0ZXMgbGVuZ3RocyBmb3IgcGFpcmVkLWVuZCByZWFkcykuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMC42NiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nIiwKICAgICJsYWJlbCIgOiAiTWluIG1hdGNoZWQgYmFzZXMgbm9ybWFsaXplZCIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRGaWx0ZXJNYXRjaE5taW4iLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRGaWx0ZXJNYXRjaE5taW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkFsaWdubWVudCB3aWxsIGJlIG91dHB1dCBvbmx5IGlmIHRoZSBudW1iZXIgb2YgbWF0Y2hlZCBiYXNlcyBpcyBoaWdoZXIgdGhhbiB0aGlzIHZhbHVlLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZyIsCiAgICAibGFiZWwiIDogIk1pbiBtYXRjaGVkIGJhc2VzIgogIH0sIHsKICAgICJpZCIgOiAiI291dEZpbHRlckludHJvbk1vdGlmcyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAib3V0RmlsdGVySW50cm9uTW90aWZzIiwKICAgICAgInN5bWJvbHMiIDogWyAiTm9uZSIsICJSZW1vdmVOb25jYW5vbmljYWwiLCAiUmVtb3ZlTm9uY2Fub25pY2FsVW5hbm5vdGF0ZWQiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0RmlsdGVySW50cm9uTW90aWZzIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJGaWx0ZXIgYWxpZ25tZW50IHVzaW5nIHRoZWlyIG1vdGlmcy4gTm9uZTogbm8gZmlsdGVyaW5nOyBSZW1vdmVOb25jYW5vbmljYWw6IGZpbHRlciBvdXQgYWxpZ25tZW50cyB0aGF0IGNvbnRhaW4gbm9uLWNhbm9uaWNhbCBqdW5jdGlvbnM7IFJlbW92ZU5vbmNhbm9uaWNhbFVuYW5ub3RhdGVkOiBmaWx0ZXIgb3V0IGFsaWdubWVudHMgdGhhdCBjb250YWluIG5vbi1jYW5vbmljYWwgdW5hbm5vdGF0ZWQganVuY3Rpb25zIHdoZW4gdXNpbmcgYW5ub3RhdGVkIHNwbGljZSBqdW5jdGlvbnMgZGF0YWJhc2UuIFRoZSBhbm5vdGF0ZWQgbm9uLWNhbm9uaWNhbCBqdW5jdGlvbnMgd2lsbCBiZSBrZXB0LiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIk5vbmUiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZyIsCiAgICAibGFiZWwiIDogIk1vdGlmcyBmaWx0ZXJpbmciCiAgfSwgewogICAgImlkIiA6ICIjbm9fcmVhZF9ncm91cHMiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJJZiB0aGlzIGJvb2xlYW4gYXJndW1lbnQgaXMgc3BlY2lmaWVkLCBubyByZWFkIGdyb3VwcyB3aWxsIGJlIHNldCBpbiB0aGUgcmVzdWx0aW5nIEJBTSBoZWFkZXIuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiT2ZmIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgZ3JvdXAiLAogICAgImxhYmVsIiA6ICJObyByZWFkIGdyb3VwcyIKICB9LCB7CiAgICAiaWQiIDogIiNsaW1pdFNqZGJJbnNlcnROc2oiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1saW1pdFNqZGJJbnNlcnROc2oiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heGltdW0gbnVtYmVyIG9mIGp1bmN0aW9uIHRvIGJlIGluc2VydGVkIHRvIHRoZSBnZW5vbWUgb24gdGhlIGZseSBhdCB0aGUgbWFwcGluZyBzdGFnZSwgaW5jbHVkaW5nIHRob3NlIGZyb20gYW5ub3RhdGlvbnMgYW5kIHRob3NlIGRldGVjdGVkIGluIHRoZSAxc3Qgc3RlcCBvZiB0aGUgMi1wYXNzIHJ1bi4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAwMDAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkxpbWl0cyIsCiAgICAibGFiZWwiIDogIk1heCBpbnNlcnQganVuY3Rpb25zIgogIH0sIHsKICAgICJpZCIgOiAiI2xpbWl0T3V0U0pvbmVSZWFkIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tbGltaXRPdXRTSm9uZVJlYWQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heCBudW1iZXIgb2YganVuY3Rpb25zIGZvciBvbmUgcmVhZCAoaW5jbHVkaW5nIGFsbCBtdWx0aS1tYXBwZXJzKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkxpbWl0cyIsCiAgICAibGFiZWwiIDogIkp1bmN0aW9ucyBtYXggbnVtYmVyIgogIH0sIHsKICAgICJpZCIgOiAiI2xpbWl0T3V0U0pjb2xsYXBzZWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1saW1pdE91dFNKY29sbGFwc2VkIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggbnVtYmVyIG9mIGNvbGxhcHNlZCBqdW5jdGlvbnMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMTAwMDAwMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJMaW1pdHMiLAogICAgImxhYmVsIiA6ICJDb2xsYXBzZWQganVuY3Rpb25zIG1heCBudW1iZXIiCiAgfSwgewogICAgImlkIiA6ICIjbGltaXRCQU1zb3J0UkFNIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tbGltaXRCQU1zb3J0UkFNIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXhpbXVtIGF2YWlsYWJsZSBSQU0gZm9yIHNvcnRpbmcgQkFNLiBJZiBzZXQgdG8gMCwgaXQgd2lsbCBiZSBzZXQgdG8gdGhlIGdlbm9tZSBpbmRleCBzaXplLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiTGltaXRzIiwKICAgICJsYWJlbCIgOiAiTGltaXQgQkFNIHNvcnRpbmcgbWVtb3J5IgogIH0sIHsKICAgICJpZCIgOiAiI2dlbm9tZURpck5hbWUiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInBvc2l0aW9uIiA6IDAsCiAgICAgICJwcmVmaXgiIDogIi0tZ2Vub21lRGlyIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAic2NyaXB0IiA6ICIkam9iLmlucHV0cy5nZW5vbWVEaXJOYW1lIHx8IFwiZ2Vub21lRGlyXCIiCiAgICAgIH0KICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk5hbWUgb2YgdGhlIGRpcmVjdG9yeSB3aGljaCBjb250YWlucyBnZW5vbWUgZmlsZXMgKHdoZW4gZ2Vub21lLnRhciBpcyB1bmNvbXByZXNzZWQpLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogImdlbm9tZURpciIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJCYXNpYyIsCiAgICAibGFiZWwiIDogIkdlbm9tZSBkaXIgbmFtZSIKICB9LCB7CiAgICAiaWQiIDogIiNnZW5vbWUiLAogICAgInR5cGUiIDogWyAiRmlsZSIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiR2Vub21lIGZpbGVzIGNyZWF0ZWQgdXNpbmcgU1RBUiBHZW5vbWUgR2VuZXJhdGUuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkJhc2ljIiwKICAgICJsYWJlbCIgOiAiR2Vub21lIGZpbGVzIiwKICAgICJzYmc6ZmlsZVR5cGVzIiA6ICJUQVIiLAogICAgInJlcXVpcmVkIiA6IHRydWUKICB9LCB7CiAgICAiaWQiIDogIiNjbGlwNXBOYmFzZXMiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIml0ZW1zIiA6ICJpbnQiLAogICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgIml0ZW1TZXBhcmF0b3IiIDogIiAiLAogICAgICAicHJlZml4IiA6ICItLWNsaXA1cE5iYXNlcyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTnVtYmVyIG9mIGJhc2VzIHRvIGNsaXAgZnJvbSA1cCBvZiBlYWNoIG1hdGUuIEluIGNhc2Ugb25seSBvbmUgdmFsdWUgaXMgZ2l2ZW4sIGl0IHdpbGwgYmUgYXNzdW1lZCB0aGUgc2FtZSBmb3IgYm90aCBtYXRlcy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgcGFyYW1ldGVycyIsCiAgICAibGFiZWwiIDogIkNsaXAgNXAgYmFzZXMiCiAgfSwgewogICAgImlkIiA6ICIjY2xpcDNwTmJhc2VzIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJpdGVtcyIgOiAiaW50IiwKICAgICAgInR5cGUiIDogImFycmF5IgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJpdGVtU2VwYXJhdG9yIiA6ICIgIiwKICAgICAgInByZWZpeCIgOiAiLS1jbGlwM3BOYmFzZXMiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk51bWJlciBvZiBiYXNlcyB0byBjbGlwIGZyb20gM3Agb2YgZWFjaCBtYXRlLiBJbiBjYXNlIG9ubHkgb25lIHZhbHVlIGlzIGdpdmVuLCBpdCB3aWxsIGJlIGFzc3VtZWQgdGhlIHNhbWUgZm9yIGJvdGggbWF0ZXMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIHBhcmFtZXRlcnMiLAogICAgImxhYmVsIiA6ICJDbGlwIDNwIGJhc2VzIgogIH0sIHsKICAgICJpZCIgOiAiI2NsaXAzcEFmdGVyQWRhcHRlck5iYXNlcyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogImludCIsCiAgICAgICJuYW1lIiA6ICJjbGlwM3BBZnRlckFkYXB0ZXJOYmFzZXMiLAogICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgIml0ZW1TZXBhcmF0b3IiIDogIiAiLAogICAgICAicHJlZml4IiA6ICItLWNsaXAzcEFmdGVyQWRhcHRlck5iYXNlcyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTnVtYmVyIG9mIGJhc2VzIHRvIGNsaXAgZnJvbSAzcCBvZiBlYWNoIG1hdGUgYWZ0ZXIgdGhlIGFkYXB0ZXIgY2xpcHBpbmcuIEluIGNhc2Ugb25seSBvbmUgdmFsdWUgaXMgZ2l2ZW4sIGl0IHdpbGwgYmUgYXNzdW1lZCB0aGUgc2FtZSBmb3IgYm90aCBtYXRlcy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgcGFyYW1ldGVycyIsCiAgICAibGFiZWwiIDogIkNsaXAgM3AgYWZ0ZXIgYWRhcHRlciBzZXEiCiAgfSwgewogICAgImlkIiA6ICIjY2xpcDNwQWRhcHRlclNlcSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogInN0cmluZyIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAiaXRlbVNlcGFyYXRvciIgOiAiICIsCiAgICAgICJwcmVmaXgiIDogIi0tY2xpcDNwQWRhcHRlclNlcSIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWRhcHRlciBzZXF1ZW5jZSB0byBjbGlwIGZyb20gM3Agb2YgZWFjaCBtYXRlLiBJbiBjYXNlIG9ubHkgb25lIHZhbHVlIGlzIGdpdmVuLCBpdCB3aWxsIGJlIGFzc3VtZWQgdGhlIHNhbWUgZm9yIGJvdGggbWF0ZXMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiLSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIHBhcmFtZXRlcnMiLAogICAgImxhYmVsIiA6ICJDbGlwIDNwIGFkYXB0ZXIgc2VxdWVuY2UiCiAgfSwgewogICAgImlkIiA6ICIjY2xpcDNwQWRhcHRlck1NcCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogImZsb2F0IiwKICAgICAgInR5cGUiIDogImFycmF5IgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJpdGVtU2VwYXJhdG9yIiA6ICIgIiwKICAgICAgInByZWZpeCIgOiAiLS1jbGlwM3BBZGFwdGVyTU1wIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggcHJvcG9ydGlvbiBvZiBtaXNtYXRjaGVzIGZvciAzcCBhZGFwdGVyIGNsaXBwaW5nIGZvciBlYWNoIG1hdGUuIEluIGNhc2Ugb25seSBvbmUgdmFsdWUgaXMgZ2l2ZW4sIGl0IHdpbGwgYmUgYXNzdW1lZCB0aGUgc2FtZSBmb3IgYm90aCBtYXRlcy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwLjEiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiUmVhZCBwYXJhbWV0ZXJzIiwKICAgICJsYWJlbCIgOiAiTWF4IG1pc21hdGNoZXMgcHJvcG9ydGlvbnMiCiAgfSwgewogICAgImlkIiA6ICIjY2hpbVNlZ21lbnRNaW4iLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1jaGltU2VnbWVudE1pbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSBsZW5ndGggb2YgY2hpbWVyaWMgc2VnbWVudCBsZW5ndGgsIGlmID0wLCBubyBjaGltZXJpYyBvdXRwdXQgKGludD49MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMTUiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQ2hpbWVyaWMgQWxpZ25tZW50cyIsCiAgICAibGFiZWwiIDogIk1pbiBzZWdtZW50IGxlbmd0aCIKICB9LCB7CiAgICAiaWQiIDogIiNjaGltU2NvcmVTZXBhcmF0aW9uIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tY2hpbVNjb3JlU2VwYXJhdGlvbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSBkaWZmZXJlbmNlIChzZXBhcmF0aW9uKSBiZXR3ZWVuIHRoZSBiZXN0IGNoaW1lcmljIHNjb3JlIGFuZCB0aGUgbmV4dCBvbmUgKGludD49MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMTAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQ2hpbWVyaWMgQWxpZ25tZW50cyIsCiAgICAibGFiZWwiIDogIk1pbiBzZXBhcmF0aW9uIHNjb3JlIgogIH0sIHsKICAgICJpZCIgOiAiI2NoaW1TY29yZU1pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWNoaW1TY29yZU1pbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSB0b3RhbCAoc3VtbWVkKSBzY29yZSBvZiB0aGUgY2hpbWVyaWMgc2VnbWVudHMgKGludD49MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJDaGltZXJpYyBBbGlnbm1lbnRzIiwKICAgICJsYWJlbCIgOiAiTWluIHRvdGFsIHNjb3JlIgogIH0sIHsKICAgICJpZCIgOiAiI2NoaW1TY29yZUp1bmN0aW9uTm9uR1RBRyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWNoaW1TY29yZUp1bmN0aW9uTm9uR1RBRyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiUGVuYWx0eSBmb3IgYSBub24tR1QvQUcgY2hpbWVyaWMganVuY3Rpb24uIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiLTEiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQ2hpbWVyaWMgQWxpZ25tZW50cyIsCiAgICAibGFiZWwiIDogIk5vbi1HVC9BRyBwZW5hbHR5IgogIH0sIHsKICAgICJpZCIgOiAiI2NoaW1TY29yZURyb3BNYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1jaGltU2NvcmVEcm9wTWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggZHJvcCAoZGlmZmVyZW5jZSkgb2YgY2hpbWVyaWMgc2NvcmUgKHRoZSBzdW0gb2Ygc2NvcmVzIG9mIGFsbCBjaGltZXJpYyBzZWdlbWVudHMpIGZyb20gdGhlIHJlYWQgbGVuZ3RoIChpbnQ+PTApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkNoaW1lcmljIEFsaWdubWVudHMiLAogICAgImxhYmVsIiA6ICJNYXggZHJvcCBzY29yZSIKICB9LCB7CiAgICAiaWQiIDogIiNjaGltT3V0VHlwZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAiY2hpbU91dFR5cGUiLAogICAgICAic3ltYm9scyIgOiBbICJTZXBhcmF0ZVNBTW9sZCIsICJXaXRoaW4iIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJUeXBlIG9mIGNoaW1lcmljIG91dHB1dC4gU2VwYXJhdGVTQU1vbGQ6IG91dHB1dCBvbGQgU0FNIGludG8gc2VwYXJhdGUgQ2hpbWVyaWMub3V0LnNhbSBmaWxlOyBXaXRoaW46IG91dHB1dCBpbnRvIG1haW4gYWxpZ25lZCBTQU0vQkFNIGZpbGVzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIlNlcGFyYXRlU0FNb2xkIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkNoaW1lcmljIEFsaWdubWVudHMiLAogICAgImxhYmVsIiA6ICJDaGltZXJpYyBvdXRwdXQgdHlwZSIKICB9LCB7CiAgICAiaWQiIDogIiNjaGltSnVuY3Rpb25PdmVyaGFuZ01pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWNoaW1KdW5jdGlvbk92ZXJoYW5nTWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIG92ZXJoYW5nIGZvciBhIGNoaW1lcmljIGp1bmN0aW9uIChpbnQ+PTApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkNoaW1lcmljIEFsaWdubWVudHMiLAogICAgImxhYmVsIiA6ICJNaW4ganVuY3Rpb24gb3ZlcmhhbmciCiAgfSwgewogICAgImlkIiA6ICIjYWxpZ25XaW5kb3dzUGVyUmVhZE5tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJmbG9hdCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWFsaWduV2luZG93c1BlclJlYWRObWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggbnVtYmVyIG9mIHdpbmRvd3MgcGVyIHJlYWQgKGludD4wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAwMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IHdpbmRvd3MgcGVyIHJlYWQiCiAgfSwgewogICAgImlkIiA6ICIjYWxpZ25UcmFuc2NyaXB0c1BlcldpbmRvd05tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnblRyYW5zY3JpcHRzUGVyV2luZG93Tm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4IG51bWJlciBvZiB0cmFuc2NyaXB0cyBwZXIgd2luZG93IChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMTAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJNYXggdHJhbnNjcmlwdHMgcGVyIHdpbmRvdyIKICB9LCB7CiAgICAiaWQiIDogIiNhbGlnblRyYW5zY3JpcHRzUGVyUmVhZE5tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnblRyYW5zY3JpcHRzUGVyUmVhZE5tYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heCBudW1iZXIgb2YgZGlmZmVyZW50IGFsaWdubWVudHMgcGVyIHJlYWQgdG8gY29uc2lkZXIgKGludD4wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAwMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IHRyYW5zY3JpcHRzIHBlciByZWFkIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduU3BsaWNlZE1hdGVNYXBMbWluT3ZlckxtYXRlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiZmxvYXQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnblNwbGljZWRNYXRlTWFwTG1pbk92ZXJMbWF0ZSIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWxpZ25TcGxpY2VkTWF0ZU1hcExtaW4gbm9ybWFsaXplZCB0byBtYXRlIGxlbmd0aCAoZmxvYXQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMC42NiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWluIG1hcHBlZCBsZW5ndGggbm9ybWFsaXplZCIKICB9LCB7CiAgICAiaWQiIDogIiNhbGlnblNwbGljZWRNYXRlTWFwTG1pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWFsaWduU3BsaWNlZE1hdGVNYXBMbWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIG1hcHBlZCBsZW5ndGggZm9yIGEgcmVhZCBtYXRlIHRoYXQgaXMgc3BsaWNlZCAoaW50PjApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIk1pbiBtYXBwZWQgbGVuZ3RoIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduU29mdENsaXBBdFJlZmVyZW5jZUVuZHMiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogImFsaWduU29mdENsaXBBdFJlZmVyZW5jZUVuZHMiLAogICAgICAic3ltYm9scyIgOiBbICJZZXMiLCAiTm8iIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tYWxpZ25Tb2Z0Q2xpcEF0UmVmZXJlbmNlRW5kcyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiT3B0aW9uIHdoaWNoIGFsbG93cyBzb2Z0IGNsaXBwaW5nIG9mIGFsaWdubWVudHMgYXQgdGhlIHJlZmVyZW5jZSAoY2hyb21vc29tZSkgZW5kcy4gQ2FuIGJlIGRpc2FibGVkIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQ3VmZmxpbmtzL0N1ZmZtZXJnZS4gWWVzOiBFbmFibGVzIHNvZnQgY2xpcHBpbmc7IE5vOiBEaXNhYmxlcyBzb2Z0IGNsaXBwaW5nLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIlllcyIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiU29mdCBjbGlwcGluZyIKICB9LCB7CiAgICAiaWQiIDogIiNhbGlnblNKb3ZlcmhhbmdNaW4iLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnblNKb3ZlcmhhbmdNaW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1pbmltdW0gb3ZlcmhhbmcgKGkuZS4gYmxvY2sgc2l6ZSkgZm9yIHNwbGljZWQgYWxpZ25tZW50cyAoaW50PjApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjUiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIk1pbiBvdmVyaGFuZyIKICB9LCB7CiAgICAiaWQiIDogIiNhbGlnblNKREJvdmVyaGFuZ01pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWFsaWduU0pEQm92ZXJoYW5nTWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIG92ZXJoYW5nIChpLmUuIGJsb2NrIHNpemUpIGZvciBhbm5vdGF0ZWQgKHNqZGIpIHNwbGljZWQgYWxpZ25tZW50cyAoaW50PjApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjMiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIk1pbiBvdmVyaGFuZzogYW5ub3RhdGVkIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduTWF0ZXNHYXBNYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnbk1hdGVzR2FwTWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXhpbXVtIGdhcCBiZXR3ZWVuIHR3byBtYXRlcywgaWYgMCwgbWF4IGludHJvbiBnYXAgd2lsbCBiZSBkZXRlcm1pbmVkIGJ5ICgyXndpbkJpbk5iaXRzKSp3aW5BbmNob3JEaXN0TmJpbnMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IG1hdGVzIGdhcCIKICB9LCB7CiAgICAiaWQiIDogIiNhbGlnbkludHJvbk1pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWFsaWduSW50cm9uTWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIGludHJvbiBzaXplOiBnZW5vbWljIGdhcCBpcyBjb25zaWRlcmVkIGludHJvbiBpZiBpdHMgbGVuZ3RoID49IGFsaWduSW50cm9uTWluLCBvdGhlcndpc2UgaXQgaXMgY29uc2lkZXJlZCBEZWxldGlvbiAoaW50Pj0wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIyMSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWluIGludHJvbiBzaXplIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduSW50cm9uTWF4IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tYWxpZ25JbnRyb25NYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heGltdW0gaW50cm9uIHNpemUsIGlmIDAsIG1heCBpbnRyb24gc2l6ZSB3aWxsIGJlIGRldGVybWluZWQgYnkgKDJed2luQmluTmJpdHMpKndpbkFuY2hvckRpc3ROYmlucy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJNYXggaW50cm9uIHNpemUiCiAgfSwgewogICAgImlkIiA6ICIjYWxpZ25FbmRzVHlwZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAiYWxpZ25FbmRzVHlwZSIsCiAgICAgICJzeW1ib2xzIiA6IFsgIkxvY2FsIiwgIkVuZFRvRW5kIiwgIkV4dGVuZDVwT2ZSZWFkMSIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnbkVuZHNUeXBlIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJUeXBlIG9mIHJlYWQgZW5kcyBhbGlnbm1lbnQuIExvY2FsOiBzdGFuZGFyZCBsb2NhbCBhbGlnbm1lbnQgd2l0aCBzb2Z0LWNsaXBwaW5nIGFsbG93ZWQuIEVuZFRvRW5kOiBmb3JjZSBlbmQgdG8gZW5kIHJlYWQgYWxpZ25tZW50LCBkbyBub3Qgc29mdC1jbGlwLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIkxvY2FsIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJBbGlnbm1lbnQgdHlwZSIKICB9IF0sCiAgIm91dHB1dHMiIDogWyB7CiAgICAiaWQiIDogIiN1bm1hcHBlZF9yZWFkcyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogIkZpbGUiLAogICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICB9IF0sCiAgICAib3V0cHV0QmluZGluZyIgOiB7CiAgICAgICJnbG9iIiA6IHsKICAgICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAic2NyaXB0IiA6ICJ7XG4gIGlmICgkam9iLmlucHV0cy51bm1hcHBlZE91dHB1dE5hbWUpIHtcbiAgICByZXR1cm4gXCIqXCIgKyAkam9iLmlucHV0cy51bm1hcHBlZE91dHB1dE5hbWUgKyBcIipcIlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIipVbm1hcHBlZC5vdXQqXCJcbiAgfVxuICBcbn0iCiAgICAgIH0sCiAgICAgICJzYmc6aW5oZXJpdE1ldGFkYXRhRnJvbSIgOiAiI3JlYWRzIiwKICAgICAgInNiZzptZXRhZGF0YSIgOiB7CiAgICAgICAgInBhaXJlZF9lbmQiIDogewogICAgICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAgICJzY3JpcHQiIDogIntcbiAgZmlsZW5hbWUgPSAkc2VsZi5wYXRoLnNwbGl0KFwiL1wiKS5wb3AoKTtcbiAgaWYgKGZpbGVuYW1lLmxhc3RJbmRleE9mKFwiLmZhc3RxXCIpICE9PSAwKXtcbiAgICByZXR1cm4gZmlsZW5hbWVbZmlsZW5hbWUubGFzdEluZGV4T2YoXCIuZmFzdHFcIikgLSAxIF1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJcIlxuICB9IFxufSIKICAgICAgICB9LAogICAgICAgICJzYW1wbGVfaWQiIDogewogICAgICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAgICJzY3JpcHQiIDogIntcbiBcbmlmKFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEuc2FtcGxlX2lkKVxuICAge1xuICAgIHJldHVybiBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnNhbXBsZV9pZFxuICAgfVxuICAgZWxzZVxuICAge1xuICAgIGZpbGVuYW1lID0gJHNlbGYucGF0aC5zcGxpdChcIi9cIikucG9wKCk7XG4gICAgcmV0dXJuIGZpbGVuYW1lLnNwbGl0KFwiLlwiKS5zaGlmdCgpXG4gICB9XG59IgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiT3V0cHV0IG9mIHVubWFwcGVkIHJlYWRzLiIsCiAgICAibGFiZWwiIDogIlVubWFwcGVkIHJlYWRzIiwKICAgICJzYmc6ZmlsZVR5cGVzIiA6ICJGQVNUUSIKICB9LCB7CiAgICAiaWQiIDogIiN0cmFuc2NyaXB0b21lX2FsaWduZWRfcmVhZHMiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJGaWxlIiBdLAogICAgIm91dHB1dEJpbmRpbmciIDogewogICAgICAiZ2xvYiIgOiAiKlRyYW5zY3JpcHRvbWUqIiwKICAgICAgInNiZzppbmhlcml0TWV0YWRhdGFGcm9tIiA6ICIjcmVhZHMiLAogICAgICAic2JnOm1ldGFkYXRhIiA6IHsKICAgICAgICAicmVmZXJlbmNlX2dlbm9tZSIgOiB7CiAgICAgICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAgICAgInNjcmlwdCIgOiAie1xuICBpZiAoJGpvYi5pbnB1dHMuZ2Vub21lLm1ldGFkYXRhKSB7XG4gICAgaWYgKCRqb2IuaW5wdXRzLmdlbm9tZS5tZXRhZGF0YS5yZWZlcmVuY2VfZ2Vub21lKSB7XG4gICAgICByZXR1cm4gJGpvYi5pbnB1dHMuZ2Vub21lLm1ldGFkYXRhLnJlZmVyZW5jZV9nZW5vbWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCJcbiAgICB9XG4gIH0gZWxzZSB7XG4gIHJldHVybiBcIlwiXG4gIH1cbn0iCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJBbGlnbm1lbnRzIHRyYW5zbGF0ZWQgaW50byB0cmFuc2NyaXB0IGNvb3JkaW5hdGVzLiIsCiAgICAibGFiZWwiIDogIlRyYW5zY3JpcHRvbWUgYWxpZ25tZW50cyIsCiAgICAic2JnOmZpbGVUeXBlcyIgOiAiQkFNIgogIH0sIHsKICAgICJpZCIgOiAiI3NwbGljZV9qdW5jdGlvbnMiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJGaWxlIiBdLAogICAgIm91dHB1dEJpbmRpbmciIDogewogICAgICAiZ2xvYiIgOiAiKlNKLm91dC50YWIiLAogICAgICAic2JnOmluaGVyaXRNZXRhZGF0YUZyb20iIDogIiNyZWFkcyIsCiAgICAgICJzYmc6bWV0YWRhdGEiIDogeyB9CiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJIaWdoIGNvbmZpZGVuY2UgY29sbGFwc2VkIHNwbGljZSBqdW5jdGlvbnMgaW4gdGFiLWRlbGltaXRlZCBmb3JtYXQuIE9ubHkganVuY3Rpb25zIHN1cHBvcnRlZCBieSB1bmlxdWVseSBtYXBwaW5nIHJlYWRzIGFyZSByZXBvcnRlZC4iLAogICAgImxhYmVsIiA6ICJTcGxpY2UganVuY3Rpb25zIiwKICAgICJzYmc6ZmlsZVR5cGVzIiA6ICJUQUIiCiAgfSwgewogICAgImlkIiA6ICIjcmVhZHNfcGVyX2dlbmUiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJGaWxlIiBdLAogICAgIm91dHB1dEJpbmRpbmciIDogewogICAgICAiZ2xvYiIgOiAiKlJlYWRzUGVyR2VuZSoiLAogICAgICAic2JnOmluaGVyaXRNZXRhZGF0YUZyb20iIDogIiNyZWFkcyIsCiAgICAgICJzYmc6bWV0YWRhdGEiIDogeyB9CiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJGaWxlIHdpdGggbnVtYmVyIG9mIHJlYWRzIHBlciBnZW5lLiBBIHJlYWQgaXMgY291bnRlZCBpZiBpdCBvdmVybGFwcyAoMW50IG9yIG1vcmUpIG9uZSBhbmQgb25seSBvbmUgZ2VuZS4iLAogICAgImxhYmVsIiA6ICJSZWFkcyBwZXIgZ2VuZSIsCiAgICAic2JnOmZpbGVUeXBlcyIgOiAiVEFCIgogIH0sIHsKICAgICJpZCIgOiAiI2xvZ19maWxlcyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogIkZpbGUiLAogICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICB9IF0sCiAgICAib3V0cHV0QmluZGluZyIgOiB7CiAgICAgICJnbG9iIiA6ICIqTG9nKi5vdXQiLAogICAgICAic2JnOmluaGVyaXRNZXRhZGF0YUZyb20iIDogIiNyZWFkcyIsCiAgICAgICJzYmc6bWV0YWRhdGEiIDogeyB9CiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJMb2cgZmlsZXMgcHJvZHVjZWQgZHVyaW5nIGFsaWdubWVudC4iLAogICAgImxhYmVsIiA6ICJMb2cgZmlsZXMiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIk9VVCIKICB9LCB7CiAgICAiaWQiIDogIiNpbnRlcm1lZGlhdGVfZ2Vub21lIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiRmlsZSIgXSwKICAgICJvdXRwdXRCaW5kaW5nIiA6IHsKICAgICAgImdsb2IiIDogIipfU1RBUmdlbm9tZS50YXIiLAogICAgICAic2JnOmluaGVyaXRNZXRhZGF0YUZyb20iIDogIiNyZWFkcyIsCiAgICAgICJzYmc6bWV0YWRhdGEiIDogeyB9CiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJBcmNoaXZlIHdpdGggZ2Vub21lIGZpbGVzIHByb2R1Y2VkIHdoZW4gYW5ub3RhdGlvbnMgYXJlIGluY2x1ZGVkIG9uIHRoZSBmbHkgKGluIHRoZSBtYXBwaW5nIHN0ZXApLiIsCiAgICAibGFiZWwiIDogIkludGVybWVkaWF0ZSBnZW5vbWUgZmlsZXMiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIlRBUiIKICB9LCB7CiAgICAiaWQiIDogIiNjaGltZXJpY19qdW5jdGlvbnMiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJGaWxlIiBdLAogICAgIm91dHB1dEJpbmRpbmciIDogewogICAgICAiZ2xvYiIgOiAiKkNoaW1lcmljLm91dC5qdW5jdGlvbiIsCiAgICAgICJzYmc6aW5oZXJpdE1ldGFkYXRhRnJvbSIgOiAiI3JlYWRzIiwKICAgICAgInNiZzptZXRhZGF0YSIgOiB7IH0KICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIklmIGNoaW1TZWdtZW50TWluIGluICdDaGltZXJpYyBBbGlnbm1lbnRzJyBzZWN0aW9uIGlzIHNldCB0byAwLCAnQ2hpbWVyaWMgSnVuY3Rpb25zJyB3b24ndCBiZSBvdXRwdXQuIiwKICAgICJsYWJlbCIgOiAiQ2hpbWVyaWMganVuY3Rpb25zIiwKICAgICJzYmc6ZmlsZVR5cGVzIiA6ICJKVU5DVElPTiIKICB9LCB7CiAgICAiaWQiIDogIiNjaGltZXJpY19hbGlnbm1lbnRzIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiRmlsZSIgXSwKICAgICJvdXRwdXRCaW5kaW5nIiA6IHsKICAgICAgImdsb2IiIDogIiouQ2hpbWVyaWMub3V0LnNhbSIsCiAgICAgICJzYmc6aW5oZXJpdE1ldGFkYXRhRnJvbSIgOiAiI3JlYWRzIiwKICAgICAgInNiZzptZXRhZGF0YSIgOiB7CiAgICAgICAgInJlZmVyZW5jZV9nZW5vbWUiIDogewogICAgICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAgICJzY3JpcHQiIDogIntcbiAgaWYgKCRqb2IuaW5wdXRzLmdlbm9tZS5tZXRhZGF0YSkge1xuICAgIGlmICgkam9iLmlucHV0cy5nZW5vbWUubWV0YWRhdGEucmVmZXJlbmNlX2dlbm9tZSkge1xuICAgICAgcmV0dXJuICRqb2IuaW5wdXRzLmdlbm9tZS5tZXRhZGF0YS5yZWZlcmVuY2VfZ2Vub21lXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlwiXG4gICAgfVxuICB9IGVsc2Uge1xuICByZXR1cm4gXCJcIlxuICB9XG59IgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWxpZ25lZCBDaGltZXJpYyBzZXF1ZW5jZXMgU0FNIC0gaWYgY2hpbVNlZ21lbnRNaW4gPSAwLCBubyBDaGltZXJpYyBBbGlnbm1lbnQgU0FNIGFuZCBDaGltZXJpYyBKdW5jdGlvbnMgb3V0cHV0cy4iLAogICAgImxhYmVsIiA6ICJDaGltZXJpYyBhbGlnbm1lbnRzIiwKICAgICJzYmc6ZmlsZVR5cGVzIiA6ICJTQU0iCiAgfSwgewogICAgImlkIiA6ICIjYWxpZ25lZF9yZWFkcyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgIkZpbGUiIF0sCiAgICAib3V0cHV0QmluZGluZyIgOiB7CiAgICAgICJnbG9iIiA6IHsKICAgICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAic2NyaXB0IiA6ICJ7XG4gIGlmICgkam9iLmlucHV0cy5vdXRTb3J0aW5nVHlwZSA9PSAnU29ydGVkQnlDb29yZGluYXRlJykge1xuICAgIHNvcnRfbmFtZSA9ICcuc29ydGVkQnlDb29yZCdcbiAgfVxuICBlbHNlIHtcbiAgICBzb3J0X25hbWUgPSAnJ1xuICB9XG4gIGlmICgkam9iLmlucHV0cy5vdXRTQU10eXBlID09ICdCQU0nKSB7XG4gICAgc2FtX25hbWUgPSBcIiouQWxpZ25lZFwiLmNvbmNhdCggc29ydF9uYW1lLCAnLm91dC5iYW0nKVxuICB9XG4gIGVsc2Uge1xuICAgIHNhbV9uYW1lID0gXCIqLkFsaWduZWQub3V0LnNhbVwiXG4gIH1cbiAgcmV0dXJuIHNhbV9uYW1lXG59IgogICAgICB9LAogICAgICAic2JnOmluaGVyaXRNZXRhZGF0YUZyb20iIDogIiNyZWFkcyIsCiAgICAgICJzYmc6bWV0YWRhdGEiIDogewogICAgICAgICJyZWZlcmVuY2VfZ2Vub21lIiA6IHsKICAgICAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICAgICAic2NyaXB0IiA6ICJ7XG4gIGlmICgkam9iLmlucHV0cy5nZW5vbWUubWV0YWRhdGEpIHtcbiAgICBpZiAoJGpvYi5pbnB1dHMuZ2Vub21lLm1ldGFkYXRhLnJlZmVyZW5jZV9nZW5vbWUpIHtcbiAgICAgIHJldHVybiAkam9iLmlucHV0cy5nZW5vbWUubWV0YWRhdGEucmVmZXJlbmNlX2dlbm9tZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJcIlxuICAgIH1cbiAgfSBlbHNlIHtcbiAgcmV0dXJuIFwiXCJcbiAgfVxufSIKICAgICAgICB9LAogICAgICAgICJzYW1wbGVfaWQiIDogewogICAgICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAgICJzY3JpcHQiIDogIntcbiBcbmlmKFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEuc2FtcGxlX2lkKVxuICAge1xuICAgIHJldHVybiBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnNhbXBsZV9pZFxuICAgfVxuICAgZWxzZVxuICAge1xuICAgIGZpbGVuYW1lID0gJHNlbGYucGF0aC5zcGxpdChcIi9cIikucG9wKCk7XG4gICAgcmV0dXJuIGZpbGVuYW1lLnNwbGl0KFwiLlwiKS5zaGlmdCgpXG4gICB9XG59IgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWxpZ25lZCBzZXF1ZW5jZSBpbiBTQU0vQkFNIGZvcm1hdC4iLAogICAgImxhYmVsIiA6ICJBbGlnbmVkIFNBTS9CQU0iLAogICAgInNiZzpmaWxlVHlwZXMiIDogIlNBTSwgQkFNIgogIH0gXSwKICAiaGludHMiIDogWyB7CiAgICAiY2xhc3MiIDogIkRvY2tlclJlcXVpcmVtZW50IiwKICAgICJkb2NrZXJQdWxsIiA6ICJpbWFnZXMuc2JnZW5vbWljcy5jb20vYW5hX2Qvc3RhcjoyLjQuMmEiLAogICAgImRvY2tlckltYWdlSWQiIDogImE0YjBhZDJjM2NhZSIKICB9LCB7CiAgICAiY2xhc3MiIDogInNiZzpNZW1SZXF1aXJlbWVudCIsCiAgICAidmFsdWUiIDogNjAwMDAKICB9LCB7CiAgICAiY2xhc3MiIDogInNiZzpDUFVSZXF1aXJlbWVudCIsCiAgICAidmFsdWUiIDogMzIKICB9IF0sCiAgInJlcXVpcmVtZW50cyIgOiBbIHsKICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbkVuZ2luZVJlcXVpcmVtZW50IiwKICAgICJyZXF1aXJlbWVudHMiIDogWyB7CiAgICAgICJjbGFzcyIgOiAiRG9ja2VyUmVxdWlyZW1lbnQiLAogICAgICAiZG9ja2VyUHVsbCIgOiAicmFiaXgvanMtZW5naW5lIgogICAgfSBdLAogICAgImlkIiA6ICIjY3dsLWpzLWVuZ2luZSIKICB9IF0sCiAgInN1Y2Nlc3NDb2RlcyIgOiBbIF0sCiAgInN0ZGluIiA6ICIiLAogICJzdGRvdXQiIDogIiIsCiAgImJhc2VDb21tYW5kIiA6IFsgInRhciIsICIteHZmIiwgewogICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICJzY3JpcHQiIDogIiRqb2IuaW5wdXRzLmdlbm9tZS5wYXRoIgogIH0sICImJiIsICIvb3B0L1NUQVIiLCAiLS1ydW5UaHJlYWROIiwgewogICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICJzY3JpcHQiIDogIntcbiAgcmV0dXJuICRqb2IuYWxsb2NhdGVkUmVzb3VyY2VzLmNwdVxufSIKICB9IF0sCiAgImFyZ3VtZW50cyIgOiBbIHsKICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgInZhbHVlRnJvbSIgOiB7CiAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgInNjcmlwdCIgOiAie1xuICBmaWxlID0gW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5wYXRoXG4gIGV4dGVuc2lvbiA9IC8oPzpcXC4oW14uXSspKT8kLy5leGVjKGZpbGUpWzFdXG4gIGlmIChleHRlbnNpb24gPT0gXCJnelwiKSB7XG4gICAgcmV0dXJuIFwiLS1yZWFkRmlsZXNDb21tYW5kIHpjYXRcIlxuICB9IGVsc2UgaWYgKGV4dGVuc2lvbiA9PSBcImJ6MlwiKSB7XG4gICAgcmV0dXJuIFwiLS1yZWFkRmlsZXNDb21tYW5kIGJ6Y2F0XCJcbiAgfVxufSIKICAgIH0KICB9LCB7CiAgICAic2VwYXJhdGUiIDogdHJ1ZSwKICAgICJ2YWx1ZUZyb20iIDogewogICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICJzY3JpcHQiIDogIntcdFxuICB2YXIgc2pGb3JtYXQgPSBcIkZhbHNlXCJcbiAgdmFyIGd0ZmdmZkZvcm1hdCA9IFwiRmFsc2VcIlxuICB2YXIgbGlzdCA9ICRqb2IuaW5wdXRzLnNqZGJHVEZmaWxlXG4gIHZhciBwYXRoc19saXN0ID0gW11cbiAgdmFyIGpvaW5lZF9wYXRocyA9IFwiXCJcbiAgXG4gIGlmIChsaXN0KSB7XG4gICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGYpe3JldHVybiBwYXRoc19saXN0LnB1c2goZi5wYXRoKX0pXG4gICAgam9pbmVkX3BhdGhzID0gcGF0aHNfbGlzdC5qb2luKFwiIFwiKVxuXG5cbiAgICBwYXRoc19saXN0LmZvckVhY2goZnVuY3Rpb24oZil7XG4gICAgICBleHQgPSBmLnJlcGxhY2UoL14uKlxcLi8sICcnKVxuICAgICAgaWYgKGV4dCA9PSBcImdmZlwiIHx8IGV4dCA9PSBcImd0ZlwiKSB7XG4gICAgICAgIGd0ZmdmZkZvcm1hdCA9IFwiVHJ1ZVwiXG4gICAgICAgIHJldHVybiBndGZnZmZGb3JtYXRcbiAgICAgIH1cbiAgICAgIGlmIChleHQgPT0gXCJ0eHRcIikge1xuICAgICAgICBzakZvcm1hdCA9IFwiVHJ1ZVwiXG4gICAgICAgIHJldHVybiBzakZvcm1hdFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBpZiAoJGpvYi5pbnB1dHMuc2pkYkdURmZpbGUgJiYgJGpvYi5pbnB1dHMuc2pkYkluc2VydFNhdmUgIT0gXCJOb25lXCIpIHtcbiAgICAgIGlmIChzakZvcm1hdCA9PSBcIlRydWVcIikge1xuICAgICAgICByZXR1cm4gXCItLXNqZGJGaWxlQ2hyU3RhcnRFbmQgXCIuY29uY2F0KGpvaW5lZF9wYXRocylcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGd0ZmdmZkZvcm1hdCA9PSBcIlRydWVcIikge1xuICAgICAgICByZXR1cm4gXCItLXNqZGJHVEZmaWxlIFwiLmNvbmNhdChqb2luZWRfcGF0aHMpXG4gICAgICB9XG4gICAgfVxuICB9XG59IgogICAgfQogIH0sIHsKICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgInZhbHVlRnJvbSIgOiB7CiAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgInNjcmlwdCIgOiAie1xuICBhID0gYiA9IGMgPSBkID0gZSA9IGYgPSBnID0gW11cbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJHVEZjaHJQcmVmaXgpIHtcbiAgICBhID0gW1wiLS1zamRiR1RGY2hyUHJlZml4XCIsICRqb2IuaW5wdXRzLnNqZGJHVEZjaHJQcmVmaXhdXG4gIH1cbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJHVEZmZWF0dXJlRXhvbikge1xuICAgIGIgPSBbXCItLXNqZGJHVEZmZWF0dXJlRXhvblwiLCAkam9iLmlucHV0cy5zamRiR1RGZmVhdHVyZUV4b25dXG4gIH1cbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJHVEZ0YWdFeG9uUGFyZW50VHJhbnNjcmlwdCkge1xuICAgIGMgPSBbXCItLXNqZGJHVEZ0YWdFeG9uUGFyZW50VHJhbnNjcmlwdFwiLCAkam9iLmlucHV0cy5zamRiR1RGdGFnRXhvblBhcmVudFRyYW5zY3JpcHRdXG4gIH1cbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJHVEZ0YWdFeG9uUGFyZW50R2VuZSkge1xuICAgIGQgPSBbXCItLXNqZGJHVEZ0YWdFeG9uUGFyZW50R2VuZVwiLCAkam9iLmlucHV0cy5zamRiR1RGdGFnRXhvblBhcmVudEdlbmVdXG4gIH1cbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJPdmVyaGFuZykge1xuICAgIGUgPSBbXCItLXNqZGJPdmVyaGFuZ1wiLCAkam9iLmlucHV0cy5zamRiT3ZlcmhhbmddXG4gIH1cbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJTY29yZSkge1xuICAgIGYgPSBbXCItLXNqZGJTY29yZVwiLCAkam9iLmlucHV0cy5zamRiU2NvcmVdXG4gIH1cbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJJbnNlcnRTYXZlKSB7XG4gICAgZyA9IFtcIi0tc2pkYkluc2VydFNhdmVcIiwgJGpvYi5pbnB1dHMuc2pkYkluc2VydFNhdmVdXG4gIH1cbiAgXG4gIFxuICBcbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJJbnNlcnRTYXZlICE9IFwiTm9uZVwiICYmICRqb2IuaW5wdXRzLnNqZGJHVEZmaWxlKSB7XG4gICAgbmV3X2xpc3QgPSBhLmNvbmNhdChiLCBjLCBkLCBlLCBmLCBnKVxuICAgIHJldHVybiBuZXdfbGlzdC5qb2luKFwiIFwiKVxuICB9XG59IgogICAgfQogIH0sIHsKICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgInZhbHVlRnJvbSIgOiB7CiAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgInNjcmlwdCIgOiAie1xuICBpZiAoJGpvYi5pbnB1dHMudHdvcGFzc01vZGUgPT0gXCJCYXNpY1wiKSB7XG4gICAgaWYgKCRqb2IuaW5wdXRzLnR3b3Bhc3MxcmVhZHNOKSB7XG4gICAgICByZXR1cm4gXCItLXR3b3Bhc3MxcmVhZHNOIFwiLmNvbmNhdCgkam9iLmlucHV0cy50d29wYXNzMXJlYWRzTikgXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIi0tdHdvcGFzczFyZWFkc04gLTFcIlxuICAgIH1cbiAgfVxufSIKICAgIH0KICB9LCB7CiAgICAic2VwYXJhdGUiIDogdHJ1ZSwKICAgICJ2YWx1ZUZyb20iIDogewogICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICJzY3JpcHQiIDogIntcbiAgaWYgKCRqb2IuaW5wdXRzLmNoaW1PdXRUeXBlID09IFwiV2l0aGluXCIpIHtcbiAgICByZXR1cm4gXCItLWNoaW1PdXRUeXBlIFwiLmNvbmNhdChcIldpdGhpblwiLCAkam9iLmlucHV0cy5vdXRTQU10eXBlKVxuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBcIi0tY2hpbU91dFR5cGUgU2VwYXJhdGVTQU1vbGRcIlxuICB9XG59IgogICAgfQogIH0sIHsKICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgInZhbHVlRnJvbSIgOiB7CiAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgInNjcmlwdCIgOiAie1xuICBpZiAoJGpvYi5pbnB1dHMubm9fcmVhZF9ncm91cHMpIHtcbiAgcmV0dXJuIFwiXCIgfVxuICBlbHNlIHtcbiAgdmFyIHBhcmFtX2xpc3QgPSBbXVxuICB2YXIgYWxsX3NhbXBsZXMgPSBbXVxuICB2YXIgbGlzdCA9IFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylcbiAgZ2V0VW5pcXVlID0gZnVuY3Rpb24oYXJyKXtcbiAgICB2YXIgdSA9IHt9LCBhID0gW107XG4gICAgZm9yKHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyArK2kpe1xuICAgICAgaWYodS5oYXNPd25Qcm9wZXJ0eShhcnJbaV0pKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYS5wdXNoKGFycltpXSk7XG4gICAgICB1W2FycltpXV0gPSAxO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gYWRkX3BhcmFtKGtleSwgdmFsdWUpe1xuICAgIGlmICh2YWx1ZSA9PSBcIlwiKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gcGFyYW1fbGlzdC5wdXNoKGtleS5jb25jYXQoXCI6XCIsIHZhbHVlKSlcbiAgICB9XG4gIH1cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGlzdC5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICBpZiAobGlzdFtpbmRleF0ubWV0YWRhdGEgIT0gbnVsbCl7XG4gICAgXHRpZiAobGlzdFtpbmRleF0ubWV0YWRhdGEuc2FtcGxlX2lkICE9IG51bGwpe1xuICAgICAgXHRcdGFsbF9zYW1wbGVzLnB1c2gobGlzdFtpbmRleF0ubWV0YWRhdGEuc2FtcGxlX2lkKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBcbiAgc2FtcGxlcyA9IGdldFVuaXF1ZShhbGxfc2FtcGxlcylcbiAgdmFyIHNhbXBsZXNfZ2l2ZW4gPSBhbGxfc2FtcGxlcy5sZW5ndGggPT0gbGlzdC5sZW5ndGhcbiAgdmFyIGFsbF9yZyA9IFtdXG4gIGlmIChzYW1wbGVzX2dpdmVuKXtcbiAgICBmb3IgKHNhbXBsZV9pbmQgPSAwOyBzYW1wbGVfaW5kIDwgc2FtcGxlcy5sZW5ndGg7ICsrc2FtcGxlX2luZCl7XG4gICAgXHRmb3IgKHJlYWRfaW5kID0gMDsgcmVhZF9pbmQgPCBsaXN0Lmxlbmd0aDsgKytyZWFkX2luZCkge1xuICAgICAgICB2YXIgcGFyYW1fbGlzdCA9IFtdXG4gICAgICAgIGlmIChsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YSAmJiBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5zYW1wbGVfaWQgPT0gc2FtcGxlc1tzYW1wbGVfaW5kXSAmJiBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5wYWlyZWRfZW5kICE9IFwiMlwiKSB7XG4gICAgICAgIFx0YWRkX3BhcmFtKCdJRCcsIHNhbXBsZXNbc2FtcGxlX2luZF0pXG4gICAgICAgICAgaWYgKCRqb2IuaW5wdXRzLnJnX3NlcV9jZW50ZXIpIHtcbiAgICAgICAgICAgIGFkZF9wYXJhbSgnQ04nLCAkam9iLmlucHV0cy5yZ19zZXFfY2VudGVyKVxuICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFtyZWFkX2luZF0ubWV0YWRhdGEgJiYgbGlzdFtyZWFkX2luZF0ubWV0YWRhdGEuc2VxX2NlbnRlcikge1xuICAgICAgICAgICAgYWRkX3BhcmFtKCdDTicsIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnNlcV9jZW50ZXIpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkam9iLmlucHV0cy5yZ19saWJyYXJ5X2lkKSB7XG4gICAgICAgICAgICBhZGRfcGFyYW0oJ0xCJywgJGpvYi5pbnB1dHMucmdfbGlicmFyeV9pZClcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhICYmIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLmxpYnJhcnlfaWQpIHtcbiAgICAgICAgICAgIGFkZF9wYXJhbSgnTEInLCBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5saWJyYXJ5X2lkKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJGpvYi5pbnB1dHMucmdfbWZsKSB7XG4gICAgICAgICAgICBhZGRfcGFyYW0oJ1BJJywgJGpvYi5pbnB1dHMucmdfbWZsKVxuICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFtyZWFkX2luZF0ubWV0YWRhdGEgJiYgbGlzdFtyZWFkX2luZF0ubWV0YWRhdGEubWVkaWFuX2ZyYWdtZW50X2xlbmd0aCkge1xuICAgICAgICAgICAgYWRkX3BhcmFtKCdQSScsIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLm1lZGlhbl9mcmFnbWVudF9sZW5ndGgpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkam9iLmlucHV0cy5yZ19wbGF0Zm9ybSkge1xuICAgICAgICAgICAgYWRkX3BhcmFtKCdQTCcsICRqb2IuaW5wdXRzLnJnX3BsYXRmb3JtLnJlcGxhY2UoLyAvZyxcIl9cIikpXG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YSAmJiBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5wbGF0Zm9ybSkge1xuICAgICAgICAgICAgYWRkX3BhcmFtKCdQTCcsIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnBsYXRmb3JtLnJlcGxhY2UoLyAvZyxcIl9cIikpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkam9iLmlucHV0cy5yZ19wbGF0Zm9ybV91bml0X2lkKSB7XG4gICAgICAgICAgICBhZGRfcGFyYW0oJ1BVJywgJGpvYi5pbnB1dHMucmdfcGxhdGZvcm1fdW5pdF9pZClcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhICYmIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnBsYXRmb3JtX3VuaXRfaWQpIHtcbiAgICAgICAgICAgIGFkZF9wYXJhbSgnUFUnLCBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5wbGF0Zm9ybV91bml0X2lkKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJGpvYi5pbnB1dHMucmdfc2FtcGxlX2lkKSB7XG4gICAgICAgICAgICBhZGRfcGFyYW0oJ1NNJywgJGpvYi5pbnB1dHMucmdfc2FtcGxlX2lkKVxuICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFtyZWFkX2luZF0ubWV0YWRhdGEgJiYgbGlzdFtyZWFkX2luZF0ubWV0YWRhdGEuc2FtcGxlX2lkKSB7XG4gICAgICAgICAgICBhZGRfcGFyYW0oJ1NNJywgbGlzdFtyZWFkX2luZF0ubWV0YWRhdGEuc2FtcGxlX2lkKVxuICAgICAgICAgIH1cbiAgICAgICAgICBhbGxfcmcucHVzaChwYXJhbV9saXN0LmpvaW4oXCIgXCIpKVxuICAgICAgIH1cblxuICAgIH1cbiAgIH1cbiAgfSBlbHNlIHtcbiAgXHR2YXIgcGFyYW1fbGlzdCA9IFtdXG4gICAgYWRkX3BhcmFtKCdJRCcsIFwiMVwiKVxuICAgIGlmICgkam9iLmlucHV0cy5yZ19zZXFfY2VudGVyKSB7XG4gICAgICBhZGRfcGFyYW0oJ0NOJywgJGpvYi5pbnB1dHMucmdfc2VxX2NlbnRlcilcbiAgICB9IGVsc2UgaWYgKFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEgJiYgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5zZXFfY2VudGVyKSB7XG4gICAgICBhZGRfcGFyYW0oJ0NOJywgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5zZXFfY2VudGVyKVxuICAgIH1cbiAgICBpZiAoJGpvYi5pbnB1dHMucmdfbGlicmFyeV9pZCkge1xuICAgICAgYWRkX3BhcmFtKCdMQicsICRqb2IuaW5wdXRzLnJnX2xpYnJhcnlfaWQpXG4gICAgfSBlbHNlIGlmIChbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhICYmIFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEubGlicmFyeV9pZCkge1xuICAgICAgYWRkX3BhcmFtKCdMQicsIFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEubGlicmFyeV9pZClcbiAgICB9XG4gICAgaWYgKCRqb2IuaW5wdXRzLnJnX21mbCkge1xuICAgICAgYWRkX3BhcmFtKCdQSScsICRqb2IuaW5wdXRzLnJnX21mbClcbiAgICB9IGVsc2UgaWYgKFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEgJiYgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5tZWRpYW5fZnJhZ21lbnRfbGVuZ3RoKSB7XG4gICAgICBhZGRfcGFyYW0oJ1BJJywgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5tZWRpYW5fZnJhZ21lbnRfbGVuZ3RoKVxuICAgIH1cbiAgICBpZiAoJGpvYi5pbnB1dHMucmdfcGxhdGZvcm0pIHtcbiAgICAgIGFkZF9wYXJhbSgnUEwnLCAkam9iLmlucHV0cy5yZ19wbGF0Zm9ybS5yZXBsYWNlKC8gL2csXCJfXCIpKVxuICAgIH0gZWxzZSBpZiAoW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YSAmJiBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnBsYXRmb3JtKSB7XG4gICAgICBhZGRfcGFyYW0oJ1BMJywgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5wbGF0Zm9ybS5yZXBsYWNlKC8gL2csXCJfXCIpKVxuICAgIH1cbiAgICBpZiAoJGpvYi5pbnB1dHMucmdfcGxhdGZvcm1fdW5pdF9pZCkge1xuICAgICAgYWRkX3BhcmFtKCdQVScsICRqb2IuaW5wdXRzLnJnX3BsYXRmb3JtX3VuaXRfaWQpXG4gICAgfSBlbHNlIGlmIChbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhICYmIFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEucGxhdGZvcm1fdW5pdF9pZCkge1xuICAgICAgYWRkX3BhcmFtKCdQVScsIFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEucGxhdGZvcm1fdW5pdF9pZClcbiAgICB9XG4gICAgaWYgKCRqb2IuaW5wdXRzLnJnX3NhbXBsZV9pZCkge1xuICAgICAgYWRkX3BhcmFtKCdTTScsICRqb2IuaW5wdXRzLnJnX3NhbXBsZV9pZClcbiAgICB9IGVsc2UgaWYgKFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEgJiYgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5zYW1wbGVfaWQpIHtcbiAgICAgIGFkZF9wYXJhbSgnU00nLCBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnNhbXBsZV9pZClcbiAgICB9XG4gICAgcmV0dXJuIFwiLS1vdXRTQU1hdHRyUkdsaW5lIFwiLmNvbmNhdChwYXJhbV9saXN0LmpvaW4oXCIgXCIpKVxuICB9XG4gIHJldHVybiBcIi0tb3V0U0FNYXR0clJHbGluZSBcIi5jb25jYXQoYWxsX3JnLmpvaW4oXCIgLCBcIikpXG4gIH1cbn0iCiAgICB9CiAgfSwgewogICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAic2NyaXB0IiA6ICJ7XG4gIGlmICgkam9iLmlucHV0cy5zamRiR1RGZmlsZSAmJiAkam9iLmlucHV0cy5xdWFudE1vZGUpIHtcbiAgICByZXR1cm4gXCItLXF1YW50TW9kZSBcIi5jb25jYXQoJGpvYi5pbnB1dHMucXVhbnRNb2RlKVxuICB9XG59IgogICAgfQogIH0sIHsKICAgICJwb3NpdGlvbiIgOiAxMDAsCiAgICAic2VwYXJhdGUiIDogdHJ1ZSwKICAgICJ2YWx1ZUZyb20iIDogewogICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICJzY3JpcHQiIDogIntcbiAgZnVuY3Rpb24gc2hhcmVkU3RhcnQoYXJyYXkpe1xuICB2YXIgQT0gYXJyYXkuY29uY2F0KCkuc29ydCgpLCBcbiAgICAgIGExPSBBWzBdLCBhMj0gQVtBLmxlbmd0aC0xXSwgTD0gYTEubGVuZ3RoLCBpPSAwO1xuICB3aGlsZShpPEwgJiYgYTEuY2hhckF0KGkpPT09IGEyLmNoYXJBdChpKSkgaSsrO1xuICByZXR1cm4gYTEuc3Vic3RyaW5nKDAsIGkpO1xuICB9XG4gIHBhdGhfbGlzdCA9IFtdXG4gIGFyciA9IFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylcbiAgYXJyLmZvckVhY2goZnVuY3Rpb24oZil7cmV0dXJuIHBhdGhfbGlzdC5wdXNoKGYucGF0aC5yZXBsYWNlKC9cXFxcL2csJy8nKS5yZXBsYWNlKCAvLipcXC8vLCAnJyApKX0pXG4gIGNvbW1vbl9wcmVmaXggPSBzaGFyZWRTdGFydChwYXRoX2xpc3QpXG4gIGludGVybWVkaWF0ZSA9IGNvbW1vbl9wcmVmaXgucmVwbGFjZSggL1xcLSR8XFxfJHxcXC4kLywgJycgKS5jb25jYXQoXCIuX1NUQVJnZW5vbWVcIilcbiAgc291cmNlID0gXCIuL1wiLmNvbmNhdChpbnRlcm1lZGlhdGUpXG4gIGRlc3RpbmF0aW9uID0gaW50ZXJtZWRpYXRlLmNvbmNhdChcIi50YXJcIilcbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJHVEZmaWxlICYmICRqb2IuaW5wdXRzLnNqZGJJbnNlcnRTYXZlICYmICRqb2IuaW5wdXRzLnNqZGJJbnNlcnRTYXZlICE9IFwiTm9uZVwiKSB7XG4gICAgcmV0dXJuIFwiJiYgdGFyIC12Y2YgXCIuY29uY2F0KGRlc3RpbmF0aW9uLCBcIiBcIiwgc291cmNlKVxuICB9XG59IgogICAgfQogIH0sIHsKICAgICJwcmVmaXgiIDogIi0tb3V0RmlsZU5hbWVQcmVmaXgiLAogICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAic2NyaXB0IiA6ICJ7XG4gIGZ1bmN0aW9uIHNoYXJlZFN0YXJ0KGFycmF5KXtcbiAgdmFyIEE9IGFycmF5LmNvbmNhdCgpLnNvcnQoKSwgXG4gICAgICBhMT0gQVswXSwgYTI9IEFbQS5sZW5ndGgtMV0sIEw9IGExLmxlbmd0aCwgaT0gMDtcbiAgd2hpbGUoaTxMICYmIGExLmNoYXJBdChpKT09PSBhMi5jaGFyQXQoaSkpIGkrKztcbiAgcmV0dXJuIGExLnN1YnN0cmluZygwLCBpKTtcbiAgfVxuICBwYXRoX2xpc3QgPSBbXVxuICBhcnIgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpXG4gIGFyci5mb3JFYWNoKGZ1bmN0aW9uKGYpe3JldHVybiBwYXRoX2xpc3QucHVzaChmLnBhdGgucmVwbGFjZSgvXFxcXC9nLCcvJykucmVwbGFjZSggLy4qXFwvLywgJycgKSl9KVxuICBjb21tb25fcHJlZml4ID0gc2hhcmVkU3RhcnQocGF0aF9saXN0KVxuICBpZiAoY29tbW9uX3ByZWZpeCA9PSBcIlwiIHx8IGNvbW1vbl9wcmVmaXggPT0gXCJfXCIpe1xuICAgIGNvbW1vbl9wcmVmaXggPSBcIkFsbFwiXG4gIH1cbiAgcmV0dXJuIFwiLi9cIi5jb25jYXQoY29tbW9uX3ByZWZpeC5yZXBsYWNlKCAvXFwtJHxcXF8kfFxcLiQvLCAnJyApLCBcIi5cIilcbn0iCiAgICB9CiAgfSwgewogICAgInBvc2l0aW9uIiA6IDEwMSwKICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgInZhbHVlRnJvbSIgOiB7CiAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgInNjcmlwdCIgOiAie1xuICBmdW5jdGlvbiBzaGFyZWRTdGFydChhcnJheSl7XG4gIHZhciBBPSBhcnJheS5jb25jYXQoKS5zb3J0KCksIFxuICAgICAgYTE9IEFbMF0sIGEyPSBBW0EubGVuZ3RoLTFdLCBMPSBhMS5sZW5ndGgsIGk9IDA7XG4gIHdoaWxlKGk8TCAmJiBhMS5jaGFyQXQoaSk9PT0gYTIuY2hhckF0KGkpKSBpKys7XG4gIHJldHVybiBhMS5zdWJzdHJpbmcoMCwgaSk7XG4gIH1cbiAgcGF0aF9saXN0ID0gW11cbiAgYXJyID0gW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVxuICBhcnIuZm9yRWFjaChmdW5jdGlvbihmKXtyZXR1cm4gcGF0aF9saXN0LnB1c2goZi5wYXRoLnJlcGxhY2UoL1xcXFwvZywnLycpLnJlcGxhY2UoIC8uKlxcLy8sICcnICkpfSlcbiAgY29tbW9uX3ByZWZpeCA9IHNoYXJlZFN0YXJ0KHBhdGhfbGlzdClcbiAgbWF0ZTEgPSBjb21tb25fcHJlZml4LnJlcGxhY2UoIC9cXC0kfFxcXyR8XFwuJC8sICcnICkuY29uY2F0KFwiLlVubWFwcGVkLm91dC5tYXRlMVwiKVxuICBtYXRlMiA9IGNvbW1vbl9wcmVmaXgucmVwbGFjZSggL1xcLSR8XFxfJHxcXC4kLywgJycgKS5jb25jYXQoXCIuVW5tYXBwZWQub3V0Lm1hdGUyXCIpXG4gIHZhciB4ID0gYXJyWzBdLnBhdGguc3BsaXQoJy8nKS5wb3AoKVxuICB2YXIgeSA9IHgudG9Mb3dlckNhc2UoKVxuICBcbiAgaWYgKCRqb2IuaW5wdXRzLnVubWFwcGVkT3V0cHV0TmFtZSkge1xuICBcdHZhciBvdXRwdXRfbmFtZSA9IFwiLlwiICsgJGpvYi5pbnB1dHMudW5tYXBwZWRPdXRwdXROYW1lICsgXCIuXCJcbiAgfSBlbHNlIHtcbiAgICB2YXIgb3V0cHV0X25hbWUgPSBcIi5Vbm1hcHBlZC5vdXQuXCJcbiAgfVxuICBcbiAgbWF0ZTFfMSA9IGNvbW1vbl9wcmVmaXgucmVwbGFjZSggL1xcLSR8XFxfJHxcXC4kLywgJycgKS5jb25jYXQob3V0cHV0X25hbWUgKyBcIm1hdGUxXCIpXG4gIG1hdGUyXzEgPSBjb21tb25fcHJlZml4LnJlcGxhY2UoIC9cXC0kfFxcXyR8XFwuJC8sICcnICkuY29uY2F0KG91dHB1dF9uYW1lICsgXCJtYXRlMlwiKVxuICBcbiAgXG4gIGlmICh5LmVuZHNXaXRoKCdmYXN0cScpIHx8IHkuZW5kc1dpdGgoJ2ZxJykgfHwgeS5lbmRzV2l0aCgnZmFzdHEuZ3onKSB8fCB5LmVuZHNXaXRoKCdmYXN0cS5iejInKSB8fCB5LmVuZHNXaXRoKCdmcS5neicpIHx8IHkuZW5kc1dpdGgoJ2ZxLmJ6MicpKSB7IFxuICAgIG1hdGUxZnEgPSBtYXRlMV8xLmNvbmNhdChcIi5mYXN0cVwiKVxuICAgIG1hdGUyZnEgPSBtYXRlMl8xLmNvbmNhdChcIi5mYXN0cVwiKVxuICB9IGVsc2UgaWYgKHkuZW5kc1dpdGgoJ2Zhc3RhJykgfHwgeS5lbmRzV2l0aCgnZmEnKSB8fCB5LmVuZHNXaXRoKCdmYXN0YS5neicpIHx8IHkuZW5kc1dpdGgoJ2Zhc3RhLmJ6MicpIHx8IHkuZW5kc1dpdGgoJ2ZhLmd6JykgfHwgeS5lbmRzV2l0aCgnZmEuYnoyJykpIHtcbiAgICBtYXRlMWZxID0gbWF0ZTFfMS5jb25jYXQoXCIuZmFzdGFcIilcbiAgICBtYXRlMmZxID0gbWF0ZTJfMS5jb25jYXQoXCIuZmFzdGFcIilcbiAgfVxuXG5cbiAgaWYgKCRqb2IuaW5wdXRzLnNvcnRVbm1hcHBlZFJlYWRzKSB7XG4gICAgXG4gIHZhciBjbWQgPSBcIlwiXG4gIHZhciBzb3J0X2NtZCA9IFwiIHwgc2VkICdzL1xcXFx0LiovLycgfCBwYXN0ZSAtIC0gLSAtIHwgc29ydCAtazEsMSAtUyAxMEcgfCB0ciAnXFxcXHQnICdcXFxcbicgPiBcIlxuICBpZiAoJGpvYi5pbnB1dHMub3V0UmVhZHNVbm1hcHBlZCA9PSBcIkZhc3R4XCIgJiYgYXJyLmxlbmd0aCA+IDEpIHtcbiAgICBjbWQgPSBjbWQuY29uY2F0KFwiICYmIGNhdCBcIiwgbWF0ZTIsIHNvcnRfY21kLCBtYXRlMmZxLCBcIiAmJiBybSBcIiwgbWF0ZTIpXG4gIH1cbiAgaWYgKCRqb2IuaW5wdXRzLm91dFJlYWRzVW5tYXBwZWQgPT0gXCJGYXN0eFwiKSB7XG4gICAgY21kID0gY21kLmNvbmNhdChcIiAmJiBjYXQgXCIsIG1hdGUxLCBzb3J0X2NtZCwgbWF0ZTFmcSwgXCIgJiYgcm0gXCIsIG1hdGUxKVxuICB9XG4gIHJldHVybiBjbWRcbiAgXG4gIH0gZWxzZSB7XG5cbiAgaWYgKCRqb2IuaW5wdXRzLm91dFJlYWRzVW5tYXBwZWQgPT0gXCJGYXN0eFwiICYmIGFyci5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIFwiJiYgbXYgXCIuY29uY2F0KG1hdGUxLCBcIiBcIiwgbWF0ZTFmcSwgXCIgJiYgbXYgXCIsIG1hdGUyLCBcIiBcIiwgbWF0ZTJmcSlcbiAgfVxuICBlbHNlIGlmICgkam9iLmlucHV0cy5vdXRSZWFkc1VubWFwcGVkID09IFwiRmFzdHhcIiAmJiBhcnIubGVuZ3RoID09IDEpIHtcbiAgICByZXR1cm4gXCImJiBtdiBcIi5jb25jYXQobWF0ZTEsIFwiIFwiLCBtYXRlMWZxKVxuICB9XG5cbiAgfVxufSIKICAgIH0KICB9IF0sCiAgInNiZzpyZXZpc2lvbiIgOiAyNiwKICAic2JnOmNhdGVnb3JpZXMiIDogWyAiQWxpZ25tZW50IiBdLAogICJkZXNjcmlwdGlvbiIgOiAiU1RBUiBpcyBhbiB1bHRyYWZhc3QgdW5pdmVyc2FsIFJOQS1zZXEgYWxpZ25lci4gSXQgaGFzIHZlcnkgaGlnaCBtYXBwaW5nIHNwZWVkLCBhY2N1cmF0ZSBhbGlnbm1lbnQgb2YgY29udGlndW91cyBhbmQgc3BsaWNlZCByZWFkcywgZGV0ZWN0aW9uIG9mIHBvbHlBLXRhaWxzLCBub24tY2Fub25pY2FsIHNwbGljZXMgYW5kIGNoaW1lcmljIChmdXNpb24pIGp1bmN0aW9ucy4gSXQgd29ya3Mgd2l0aCByZWFkcyBzdGFydGluZyBmcm9tIGxlbmd0aHMgfjE1IGJhc2VzIHVwIHRvIH4zMDAgYmFzZXMuIEluIGNhc2Ugb2YgaGF2aW5nIGxvbmdlciByZWFkcywgdXNlIG9mIFNUQVIgTG9uZyBpcyByZWNvbW1lbmRlZC5cblxuIyMjQ29tbW9uIGlzc3VlcyMjI1xuMS4gSW4gY2FzZSBvZiBwYWlyZWQtZW5kIGFsaWdubWVudCBpdCBpcyBjcnVjaWFsIHRvIHNldCBtZXRhZGF0YSAncGFpcmVkLWVuZCcgZmllbGQgdG8gMS8yLlxuMi4gRmlsZXMgaW4gbXVsdGktRkFTVFEgZm9ybWF0IGFyZSBjdXJyZW50bHkgbm90IHN1cHBvcnRlZCwgaS5lLiBpZiB5b3UgaGF2ZSBzaW5nbGUtZW5kIHJlYWRzIHRoYXQgc3BhbiBtdWx0aXBsZSBGQVNUUSBmaWxlcywgb3IgcGFpcmVkLWVuZCByZWFkcyB0aGF0IHNwYW4gbW9yZSB0aGFuIDIgZmlsZXMsIHBsZWFzZSB1c2UgYSB0b29sIGxpa2UgU0JHIE1lcmdlIEZBU1RRcyBiZWZvcmUgcHJvdmlkaW5nIHlvdXIgZmlsZXMgdG8gdGhlIFNUQVIgYWxpZ25lci5cbjMuIElmIHlvdSBhcmUgcHJvdmlkaW5nIGEgR0ZGMyBmaWxlIGFuZCB3aXNoIHRvIHVzZSBTVEFSIHJlc3VsdHMgZm9yIGZ1cnRoZXIgZG93bnN0cmVhbSBhbmFseXNpcywgYSBnb29kIGlkZWEgd291bGQgYmUgdG8gc2V0IHRoZSBcIkV4b25zJyBwYXJlbnRzIG5hbWVcIiAoaWQ6IHNqZGJHVEZ0YWdFeG9uUGFyZW50VHJhbnNjcmlwdCkgb3B0aW9uIHRvIFwiUGFyZW50XCIuXG40LiBVbm1hcHBlZCByZWFkcyBhcmUsIGJ5IGRlZmF1bHQsIHVuc29ydGVkLiBJZiB5b3Ugd2FudCB0byBzb3J0IHRoZW0gYnkgcmVhZCBJRCwgcGxlYXNlIHNwZWNpZnkgdGhlIFwiU29ydCB1bm1hcHBlZCByZWFkc1wiIG9wdGlvbiwgdGhvdWdoIGtlZXAgaW4gbWluZCB0aGF0IHRoaXMgY2FuIGluY3JlYXNlIFNUQVIgcnVuIHRpbWUuIiwKICAic2JnOmNyZWF0ZWRPbiIgOiAxNDUwOTExNDcxLAogICJzYmc6dG9vbGtpdCIgOiAiU1RBUiIsCiAgInNiZzpjb250cmlidXRvcnMiIDogWyAiYW5hX2QiLCAidXJvc19zaXBldGljIiwgImJpeC1kZW1vIiwgImpleG5hZXgiIF0sCiAgInNiZzppZCIgOiAiYWRtaW4vc2JnLXB1YmxpYy1kYXRhL3N0YXIvMjYiLAogICJzYmc6am9iIiA6IHsKICAgICJhbGxvY2F0ZWRSZXNvdXJjZXMiIDogewogICAgICAiY3B1IiA6IDMyLAogICAgICAibWVtIiA6IDYwMDAwCiAgICB9LAogICAgImlucHV0cyIgOiB7CiAgICAgICJHRU5PTUVfRElSX05BTUUiIDogIiIsCiAgICAgICJhbGlnbkVuZHNUeXBlIiA6ICJMb2NhbCIsCiAgICAgICJhbGlnbkludHJvbk1heCIgOiAwLAogICAgICAiYWxpZ25JbnRyb25NaW4iIDogMCwKICAgICAgImFsaWduTWF0ZXNHYXBNYXgiIDogMCwKICAgICAgImFsaWduU0pEQm92ZXJoYW5nTWluIiA6IDAsCiAgICAgICJhbGlnblNKb3ZlcmhhbmdNaW4iIDogMCwKICAgICAgImFsaWduU29mdENsaXBBdFJlZmVyZW5jZUVuZHMiIDogIlllcyIsCiAgICAgICJhbGlnblNwbGljZWRNYXRlTWFwTG1pbiIgOiAwLAogICAgICAiYWxpZ25TcGxpY2VkTWF0ZU1hcExtaW5PdmVyTG1hdGUiIDogMCwKICAgICAgImFsaWduVHJhbnNjcmlwdHNQZXJSZWFkTm1heCIgOiAwLAogICAgICAiYWxpZ25UcmFuc2NyaXB0c1BlcldpbmRvd05tYXgiIDogMCwKICAgICAgImFsaWduV2luZG93c1BlclJlYWRObWF4IiA6IDAsCiAgICAgICJjaGltSnVuY3Rpb25PdmVyaGFuZ01pbiIgOiAwLAogICAgICAiY2hpbU91dFR5cGUiIDogIldpdGhpbiIsCiAgICAgICJjaGltU2NvcmVEcm9wTWF4IiA6IDAsCiAgICAgICJjaGltU2NvcmVKdW5jdGlvbk5vbkdUQUciIDogMCwKICAgICAgImNoaW1TY29yZU1pbiIgOiAwLAogICAgICAiY2hpbVNjb3JlU2VwYXJhdGlvbiIgOiAwLAogICAgICAiY2hpbVNlZ21lbnRNaW4iIDogMCwKICAgICAgImNsaXAzcEFkYXB0ZXJNTXAiIDogWyAwIF0sCiAgICAgICJjbGlwM3BBZGFwdGVyU2VxIiA6IFsgImNsaXAzcEFkYXB0ZXJTZXEiIF0sCiAgICAgICJjbGlwM3BBZnRlckFkYXB0ZXJOYmFzZXMiIDogWyAwIF0sCiAgICAgICJjbGlwM3BOYmFzZXMiIDogWyAwLCAzIF0sCiAgICAgICJjbGlwNXBOYmFzZXMiIDogWyAwIF0sCiAgICAgICJnZW5vbWUiIDogewogICAgICAgICJjbGFzcyIgOiAiRmlsZSIsCiAgICAgICAgInBhdGgiIDogImdlbm9tZS5leHQiLAogICAgICAgICJzZWNvbmRhcnlGaWxlcyIgOiBbIF0sCiAgICAgICAgInNpemUiIDogMAogICAgICB9LAogICAgICAibGltaXRCQU1zb3J0UkFNIiA6IDAsCiAgICAgICJsaW1pdE91dFNKY29sbGFwc2VkIiA6IDAsCiAgICAgICJsaW1pdE91dFNKb25lUmVhZCIgOiAwLAogICAgICAibGltaXRTamRiSW5zZXJ0TnNqIiA6IDAsCiAgICAgICJub19yZWFkX2dyb3VwcyIgOiBmYWxzZSwKICAgICAgIm91dEZpbHRlckludHJvbk1vdGlmcyIgOiAiTm9uZSIsCiAgICAgICJvdXRGaWx0ZXJNYXRjaE5taW4iIDogMCwKICAgICAgIm91dEZpbHRlck1hdGNoTm1pbk92ZXJMcmVhZCIgOiAwLAogICAgICAib3V0RmlsdGVyTWlzbWF0Y2hObWF4IiA6IDAsCiAgICAgICJvdXRGaWx0ZXJNaXNtYXRjaE5vdmVyTG1heCIgOiAwLAogICAgICAib3V0RmlsdGVyTWlzbWF0Y2hOb3ZlclJlYWRMbWF4IiA6IDAsCiAgICAgICJvdXRGaWx0ZXJNdWx0aW1hcE5tYXgiIDogMCwKICAgICAgIm91dEZpbHRlck11bHRpbWFwU2NvcmVSYW5nZSIgOiAwLAogICAgICAib3V0RmlsdGVyU2NvcmVNaW4iIDogMCwKICAgICAgIm91dEZpbHRlclNjb3JlTWluT3ZlckxyZWFkIiA6IDAsCiAgICAgICJvdXRGaWx0ZXJUeXBlIiA6ICJOb3JtYWwiLAogICAgICAib3V0UVNjb252ZXJzaW9uQWRkIiA6IDAsCiAgICAgICJvdXRSZWFkc1VubWFwcGVkIiA6ICJGYXN0eCIsCiAgICAgICJvdXRTQU1hdHRyaWJ1dGVzIiA6ICJTdGFuZGFyZCIsCiAgICAgICJvdXRTQU1mbGFnQU5EIiA6IDAsCiAgICAgICJvdXRTQU1mbGFnT1IiIDogMCwKICAgICAgIm91dFNBTWhlYWRlckhEIiA6ICJvdXRTQU1oZWFkZXJIRCIsCiAgICAgICJvdXRTQU1oZWFkZXJQRyIgOiAib3V0U0FNaGVhZGVyUEciLAogICAgICAib3V0U0FNbWFwcVVuaXF1ZSIgOiAwLAogICAgICAib3V0U0FNbW9kZSIgOiAiRnVsbCIsCiAgICAgICJvdXRTQU1vcmRlciIgOiAiUGFpcmVkIiwKICAgICAgIm91dFNBTXByaW1hcnlGbGFnIiA6ICJPbmVCZXN0U2NvcmUiLAogICAgICAib3V0U0FNcmVhZElEIiA6ICJTdGFuZGFyZCIsCiAgICAgICJvdXRTQU1zdHJhbmRGaWVsZCIgOiAiTm9uZSIsCiAgICAgICJvdXRTQU10eXBlIiA6ICJCQU0iLAogICAgICAib3V0U0FNdW5tYXBwZWQiIDogIk5vbmUiLAogICAgICAib3V0U0pmaWx0ZXJDb3VudFRvdGFsTWluIiA6IFsgMywgMSwgMSwgMSBdLAogICAgICAib3V0U0pmaWx0ZXJDb3VudFVuaXF1ZU1pbiIgOiBbIDMsIDEsIDEsIDEgXSwKICAgICAgIm91dFNKZmlsdGVyRGlzdFRvT3RoZXJTSm1pbiIgOiBbIDAgXSwKICAgICAgIm91dFNKZmlsdGVySW50cm9uTWF4VnNSZWFkTiIgOiBbIDAgXSwKICAgICAgIm91dFNKZmlsdGVyT3ZlcmhhbmdNaW4iIDogWyAzMCwgMTIsIDEyLCAxMiBdLAogICAgICAib3V0U0pmaWx0ZXJSZWFkcyIgOiAiQWxsIiwKICAgICAgIm91dFNvcnRpbmdUeXBlIiA6ICJVbnNvcnRlZCIsCiAgICAgICJxdWFudE1vZGUiIDogIlRyYW5zY3JpcHRvbWVTQU0iLAogICAgICAicXVhbnRUcmFuc2NyaXB0b21lQmFuIiA6ICJJbmRlbFNvZnRjbGlwU2luZ2xlZW5kIiwKICAgICAgInJlYWRNYXBOdW1iZXIiIDogMCwKICAgICAgInJlYWRNYXRlc0xlbmd0aHNJbiIgOiAiTm90RXF1YWwiLAogICAgICAicmVhZHMiIDogWyB7CiAgICAgICAgImNsYXNzIiA6ICJGaWxlIiwKICAgICAgICAibWV0YWRhdGEiIDogewogICAgICAgICAgImZvcm1hdCIgOiAiZmFzdHEiLAogICAgICAgICAgInBhaXJlZF9lbmQiIDogIjEiLAogICAgICAgICAgInNhbXBsZV9pZCIgOiAiYSIsCiAgICAgICAgICAic2VxX2NlbnRlciIgOiAiaWxsdW1pbmEiCiAgICAgICAgfSwKICAgICAgICAicGF0aCIgOiAiL3Rlc3QtZGF0YS9yZWFkX0FfMS5mYXN0cSIsCiAgICAgICAgInNlY29uZGFyeUZpbGVzIiA6IFsgXSwKICAgICAgICAic2l6ZSIgOiAwCiAgICAgIH0sIHsKICAgICAgICAiY2xhc3MiIDogIkZpbGUiLAogICAgICAgICJtZXRhZGF0YSIgOiB7CiAgICAgICAgICAicGFpcmVkX2VuZCIgOiAiMiIsCiAgICAgICAgICAic2FtcGxlX2lkIiA6ICJhIgogICAgICAgIH0sCiAgICAgICAgInBhdGgiIDogIi90ZXN0LWRhdGEvcmVhZF9BXzIuZmFzdHEiLAogICAgICAgICJzZWNvbmRhcnlGaWxlcyIgOiBbIF0sCiAgICAgICAgInNpemUiIDogMAogICAgICB9LCB7CiAgICAgICAgImNsYXNzIiA6ICJGaWxlIiwKICAgICAgICAibWV0YWRhdGEiIDogewogICAgICAgICAgInBhaXJlZF9lbmQiIDogIjIiLAogICAgICAgICAgInNhbXBsZV9pZCIgOiAiYiIKICAgICAgICB9LAogICAgICAgICJwYXRoIiA6ICIvdGVzdC1kYXRhL3JlYWRfQl8yLmZhc3RxIiwKICAgICAgICAic2Vjb25kYXJ5RmlsZXMiIDogWyBdLAogICAgICAgICJzaXplIiA6IDAKICAgICAgfSwgewogICAgICAgICJjbGFzcyIgOiAiRmlsZSIsCiAgICAgICAgIm1ldGFkYXRhIiA6IHsKICAgICAgICAgICJwYWlyZWRfZW5kIiA6ICIxIiwKICAgICAgICAgICJzYW1wbGVfaWQiIDogImIiCiAgICAgICAgfSwKICAgICAgICAicGF0aCIgOiAiL3Rlc3QtZGF0YS9yZWFkX0JfMS5mYXN0cSIsCiAgICAgICAgInNlY29uZGFyeUZpbGVzIiA6IFsgXSwKICAgICAgICAic2l6ZSIgOiAwCiAgICAgIH0gXSwKICAgICAgInJnX2xpYnJhcnlfaWQiIDogIiIsCiAgICAgICJyZ19tZmwiIDogInJnX21mbCIsCiAgICAgICJyZ19wbGF0Zm9ybSIgOiAiSW9uIFRvcnJlbnQgUEdNIiwKICAgICAgInJnX3BsYXRmb3JtX3VuaXRfaWQiIDogInJnX3BsYXRmb3JtX3VuaXQiLAogICAgICAicmdfc2FtcGxlX2lkIiA6ICJyZ19zYW1wbGUiLAogICAgICAicmdfc2VxX2NlbnRlciIgOiAiIiwKICAgICAgInNjb3JlRGVsQmFzZSIgOiAwLAogICAgICAic2NvcmVEZWxPcGVuIiA6IDAsCiAgICAgICJzY29yZUdhcCIgOiAwLAogICAgICAic2NvcmVHYXBBVEFDIiA6IDAsCiAgICAgICJzY29yZUdhcEdDQUciIDogMCwKICAgICAgInNjb3JlR2FwTm9uY2FuIiA6IDAsCiAgICAgICJzY29yZUdlbm9taWNMZW5ndGhMb2cyc2NhbGUiIDogMCwKICAgICAgInNjb3JlSW5zQmFzZSIgOiAwLAogICAgICAic2NvcmVJbnNPcGVuIiA6IDAsCiAgICAgICJzY29yZVN0aXRjaFNKc2hpZnQiIDogMCwKICAgICAgInNlZWRNdWx0aW1hcE5tYXgiIDogMCwKICAgICAgInNlZWROb25lTG9jaVBlcldpbmRvdyIgOiAwLAogICAgICAic2VlZFBlclJlYWRObWF4IiA6IDAsCiAgICAgICJzZWVkUGVyV2luZG93Tm1heCIgOiAwLAogICAgICAic2VlZFNlYXJjaExtYXgiIDogMCwKICAgICAgInNlZWRTZWFyY2hTdGFydExtYXgiIDogMCwKICAgICAgInNlZWRTZWFyY2hTdGFydExtYXhPdmVyTHJlYWQiIDogMCwKICAgICAgInNqZGJHVEZjaHJQcmVmaXgiIDogImNoclByZWZpeCIsCiAgICAgICJzamRiR1RGZmVhdHVyZUV4b24iIDogIiIsCiAgICAgICJzamRiR1RGZmlsZSIgOiBbIHsKICAgICAgICAicGF0aCIgOiAiL2RlbW8vdGVzdC1kYXRhL2NocjIwLmd0ZiIKICAgICAgfSBdLAogICAgICAic2pkYkdURnRhZ0V4b25QYXJlbnRHZW5lIiA6ICIiLAogICAgICAic2pkYkdURnRhZ0V4b25QYXJlbnRUcmFuc2NyaXB0IiA6ICIiLAogICAgICAic2pkYkluc2VydFNhdmUiIDogIkJhc2ljIiwKICAgICAgInNqZGJPdmVyaGFuZyIgOiBudWxsLAogICAgICAic2pkYlNjb3JlIiA6IG51bGwsCiAgICAgICJzb3J0VW5tYXBwZWRSZWFkcyIgOiB0cnVlLAogICAgICAidHdvcGFzczFyZWFkc04iIDogMCwKICAgICAgInR3b3Bhc3NNb2RlIiA6ICJCYXNpYyIsCiAgICAgICJ1bm1hcHBlZE91dHB1dE5hbWUiIDogIiIsCiAgICAgICJ3aW5BbmNob3JEaXN0TmJpbnMiIDogMCwKICAgICAgIndpbkFuY2hvck11bHRpbWFwTm1heCIgOiAwLAogICAgICAid2luQmluTmJpdHMiIDogMCwKICAgICAgIndpbkZsYW5rTmJpbnMiIDogMAogICAgfQogIH0sCiAgInNiZzpzYmdNYWludGFpbmVkIiA6IGZhbHNlLAogICJ0ZW1wb3JhcnlGYWlsQ29kZXMiIDogWyBdLAogICJzYmc6bGlua3MiIDogWyB7CiAgICAiaWQiIDogImh0dHBzOi8vZ2l0aHViLmNvbS9hbGV4ZG9iaW4vU1RBUiIsCiAgICAibGFiZWwiIDogIkhvbWVwYWdlIgogIH0sIHsKICAgICJpZCIgOiAiaHR0cHM6Ly9naXRodWIuY29tL2FsZXhkb2Jpbi9TVEFSL3JlbGVhc2VzIiwKICAgICJsYWJlbCIgOiAiUmVsZWFzZXMiCiAgfSwgewogICAgImlkIiA6ICJodHRwczovL2dpdGh1Yi5jb20vYWxleGRvYmluL1NUQVIvYmxvYi9tYXN0ZXIvZG9jL1NUQVJtYW51YWwucGRmIiwKICAgICJsYWJlbCIgOiAiTWFudWFsIgogIH0sIHsKICAgICJpZCIgOiAiaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIWZvcnVtL3JuYS1zdGFyIiwKICAgICJsYWJlbCIgOiAiU3VwcG9ydCIKICB9LCB7CiAgICAiaWQiIDogImh0dHA6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9wdWJtZWQvMjMxMDQ4ODYiLAogICAgImxhYmVsIiA6ICJQdWJsaWNhdGlvbiIKICB9IF0sCiAgInNiZzp0b29sQXV0aG9yIiA6ICJBbGV4YW5kZXIgRG9iaW4vQ1NITCIsCiAgImlkIiA6ICJiaXgtZGVtby9zdGFyLTItNC0yYS1kZW1vL3N0YXIvMjYiLAogICJjbGFzcyIgOiAiQ29tbWFuZExpbmVUb29sIiwKICAic2JnOnByb2plY3QiIDogImJpeC1kZW1vL3N0YXItMi00LTJhLWRlbW8iLAogICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiVXBkYXRlIHJlYWQgZ3JvdXAgZXhwcmVzc2lvbiB0byBoYW5kbGUgY2FzZXMgd2l0aCBmaWxlcyB3aXRob3V0IGFueSBtZXRhZGF0YS4iLAogICJzYmc6bW9kaWZpZWRPbiIgOiAxNDg1NDM0Mjg4LAogICJzYmc6Y21kUHJldmlldyIgOiAidGFyIC14dmYgZ2Vub21lLmV4dCAmJiAvb3B0L1NUQVIgLS1ydW5UaHJlYWROIDMyICAgIC0tc2pkYkdURmZpbGUgL2RlbW8vdGVzdC1kYXRhL2NocjIwLmd0ZiAgLS1zamRiR1RGY2hyUHJlZml4IGNoclByZWZpeCAtLXNqZGJJbnNlcnRTYXZlIEJhc2ljICAtLXR3b3Bhc3MxcmVhZHNOIC0xICAtLWNoaW1PdXRUeXBlIFdpdGhpbkJBTSAgLS1vdXRTQU1hdHRyUkdsaW5lIElEOmEgQ046aWxsdW1pbmEgUEk6cmdfbWZsIFBMOklvbl9Ub3JyZW50X1BHTSBQVTpyZ19wbGF0Zm9ybV91bml0IFNNOnJnX3NhbXBsZSAsIElEOmIgUEk6cmdfbWZsIFBMOklvbl9Ub3JyZW50X1BHTSBQVTpyZ19wbGF0Zm9ybV91bml0IFNNOnJnX3NhbXBsZSAgLS1xdWFudE1vZGUgVHJhbnNjcmlwdG9tZVNBTSAtLW91dEZpbGVOYW1lUHJlZml4IC4vcmVhZC4gIC0tcmVhZEZpbGVzSW4gL3Rlc3QtZGF0YS9yZWFkX0FfMS5mYXN0cSwvdGVzdC1kYXRhL3JlYWRfQl8xLmZhc3RxIC90ZXN0LWRhdGEvcmVhZF9BXzIuZmFzdHEsL3Rlc3QtZGF0YS9yZWFkX0JfMi5mYXN0cSAgJiYgdGFyIC12Y2YgcmVhZC5fU1RBUmdlbm9tZS50YXIgLi9yZWFkLl9TVEFSZ2Vub21lICAgJiYgY2F0IHJlYWQuVW5tYXBwZWQub3V0Lm1hdGUyIHwgc2VkICdzL1xcdC4qLy8nIHwgcGFzdGUgLSAtIC0gLSB8IHNvcnQgLWsxLDEgLVMgMTBHIHwgdHIgJ1xcdCcgJ1xcbicgPiByZWFkLlVubWFwcGVkLm91dC5tYXRlMi5mYXN0cSAmJiBybSByZWFkLlVubWFwcGVkLm91dC5tYXRlMiAmJiBjYXQgcmVhZC5Vbm1hcHBlZC5vdXQubWF0ZTEgfCBzZWQgJ3MvXFx0LiovLycgfCBwYXN0ZSAtIC0gLSAtIHwgc29ydCAtazEsMSAtUyAxMEcgfCB0ciAnXFx0JyAnXFxuJyA+IHJlYWQuVW5tYXBwZWQub3V0Lm1hdGUxLmZhc3RxICYmIHJtIHJlYWQuVW5tYXBwZWQub3V0Lm1hdGUxIiwKICAic2JnOmxpY2Vuc2UiIDogIkdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHYzLjAgb25seSIsCiAgImxhYmVsIiA6ICJTVEFSIiwKICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgInNiZzpsYXRlc3RSZXZpc2lvbiIgOiAyNiwKICAic2JnOmNyZWF0ZWRCeSIgOiAiYml4LWRlbW8iLAogICJ4IiA6IDYyMy45OTk5OTk5OTk5OTk5LAogICJ5IiA6IDMyMy4wMDAwMDAwMDAwMDAwNiwKICAic2JnOmltYWdlX3VybCIgOiBudWxsLAogICJzYmc6cmV2aXNpb25zSW5mbyIgOiBbIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAiYml4LWRlbW8iLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NTA5MTE0NzEsCiAgICAic2JnOnJldmlzaW9uIiA6IDAsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAiYml4LWRlbW8iLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NTA5MTE0NzMsCiAgICAic2JnOnJldmlzaW9uIiA6IDEsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAiYml4LWRlbW8iLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NTA5MTE0NzUsCiAgICAic2JnOnJldmlzaW9uIiA6IDIsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDYyODc4NTI4LAogICAgInNiZzpyZXZpc2lvbiIgOiAzLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogImFuYV9kIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDYyODg5MjIyLAogICAgInNiZzpyZXZpc2lvbiIgOiA0LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogImpleG5hZXgiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NjQ5NTY2MzgsCiAgICAic2JnOnJldmlzaW9uIiA6IDUsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAiamV4bmFleCIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ2NDk1Njk4OCwKICAgICJzYmc6cmV2aXNpb24iIDogNiwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJhbmFfZCIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ2NzMwNTQzNCwKICAgICJzYmc6cmV2aXNpb24iIDogNywKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NzA2NjE1MzksCiAgICAic2JnOnJldmlzaW9uIiA6IDgsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDcwNjY4MTgzLAogICAgInNiZzpyZXZpc2lvbiIgOiA5LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3MDY3MjMwNCwKICAgICJzYmc6cmV2aXNpb24iIDogMTAsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDcwNjcyNTkzLAogICAgInNiZzpyZXZpc2lvbiIgOiAxMSwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NzE4NjU3NzQsCiAgICAic2JnOnJldmlzaW9uIiA6IDEyLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJBZGRlZCBwcm9wZXIgJ3BhaXJlZF9lbmQnIG1ldGFkYXRhIHRvICd1bm1hcHBlZF9yZWFkcycgb3V0cHV0LiIKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3MTg3MTI5OCwKICAgICJzYmc6cmV2aXNpb24iIDogMTMsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIlVwZGF0ZWQgZGVzY3JpcHRpb24uIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDcyMjA2ODkxLAogICAgInNiZzpyZXZpc2lvbiIgOiAxNCwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiQWRkIHByb3BlciAnUmVmZXJlbmNlIEdlbm9tZScgbWV0YWRhdGEgdG8gQkFNL1NBTSBvdXRwdXRzLiIKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3MzA2ODQ4OCwKICAgICJzYmc6cmV2aXNpb24iIDogMTUsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIkZpeGVkIGRlc2NyaXB0aW9uIHR5cG9zLiIKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3MzA3MDQ4OCwKICAgICJzYmc6cmV2aXNpb24iIDogMTYsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIkNoYW5nZWQgbnVtYmVyIG9mIGNvcmVzIGZyb20gMTUgdG8gMzIuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAiYW5hX2QiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NzUxNjkzMTMsCiAgICAic2JnOnJldmlzaW9uIiA6IDE3LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJNdWx0aXBsZSByZWFkIHBhaXJzIGNhbiBiZSBpbmNsdWRlZCBpbiB0aGUgY29tbWFuZCBsaW5lIG5vdy4gSW4gb3JkZXIgdG8gaGF2ZSB0aGUgc2FtZSBvcmRlciBvZiB0aGUgcGFpcnMsIFwiU2FtcGxlIElEXCIgbWV0YWRhdGEgaGFzIHRvIGJlIHNldC4gT3RoZXJ3aXNlLCBwYWlycyB3aWxsIGJlIG9yZGVyZWQgcmFuZG9tbHkuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAiYW5hX2QiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NzU3NDkzMzcsCiAgICAic2JnOnJldmlzaW9uIiA6IDE4LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJFeHByZXNzaW9uIGZpeGVkIGZvciByZWFkcyBpbnB1dC4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NzY4OTMxNzMsCiAgICAic2JnOnJldmlzaW9uIiA6IDE5LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJVcGRhdGUgc29tZSBleHByZXNzaW9ucyB0byBhY2NwZXQgbXVsdGlwbGUgZmFzdHEgZmlsZXMuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDc3NDg4NjE2LAogICAgInNiZzpyZXZpc2lvbiIgOiAyMCwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiVW5tYXBwZWQgcmVhZHMgb3V0cHV0IGV4dGVuc2lvbiBpcyBub3cgdGhlIHNhbWUgYXMgdGhlIGlucHV0IHJlYWQgZmlsZXMgZXh0ZW5zaW9ucy4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NzkxMzEyODEsCiAgICAic2JnOnJldmlzaW9uIiA6IDIxLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJGaXhlZCBhbiBlbmNvZGluZyBidWcgdGhhdCBjb3VsZCBtYW5pZmVzdCBpbiBkb3duc3RyZWFtIGFuYWx5c2lzIHVuZGVyIFdpbmRvd3MgcGxhdGZvcm0uIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDgwNTIzNjUzLAogICAgInNiZzpyZXZpc2lvbiIgOiAyMiwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiQWRkIGNvdXBsZSBvZiBzbWFsbCBmZWF0dXJlcy4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0ODEyMDUwOTMsCiAgICAic2JnOnJldmlzaW9uIiA6IDIzLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJBZGQgb3B0aW9uIHRvIHNvcnQgdW5tYXBwZWQgcmVhZHMgYnkgSUQuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDgxMjI1OTU3LAogICAgInNiZzpyZXZpc2lvbiIgOiAyNCwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiTWFrZSBzb3J0aW5nIHVubWFwcGVkIHJlYWRzIGJ5IHJlYWQgSUQgdGhlIGRlZmF1bHQgYmVoYXZpb3VyLiIKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ4MTI4MzE0MCwKICAgICJzYmc6cmV2aXNpb24iIDogMjUsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIkFkZCBvcHRpb24gdG8gc29ydCB1bm1hcHBlZCByZWFkcyBieSByZWFkIElEIChkZWZhdWx0IGlzIE9GRikuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDg1NDM0Mjg4LAogICAgInNiZzpyZXZpc2lvbiIgOiAyNiwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiVXBkYXRlIHJlYWQgZ3JvdXAgZXhwcmVzc2lvbiB0byBoYW5kbGUgY2FzZXMgd2l0aCBmaWxlcyB3aXRob3V0IGFueSBtZXRhZGF0YS4iCiAgfSBdLAogICJzYmc6dG9vbGtpdFZlcnNpb24iIDogIjIuNC4yYSIsCiAgInNiZzp2YWxpZGF0aW9uRXJyb3JzIiA6IFsgXQp9",
  "status" : "COMPLETED",
  "inputs" : {
    "genome" : [ {
      "size" : 29381038080,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR_Genome_Generate/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_star-2.4.2a.tar",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR_Genome_Generate/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_star-2.4.2a.tar",
      "name" : "human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_star-2.4.2a.tar",
      "checksum" : "sha1$4bd697e3e0d5cd38730f6b01c220b3d550d899d5",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ],
    "outReadsUnmapped" : "Fastx",
    "outSAMtype" : "BAM",
    "quantMode" : "TranscriptomeSAM",
    "reads" : [ {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/SBG_FASTQ_Quality_Detector/1/G20479.HCC1143.2.converted.pe_1.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/SBG_FASTQ_Quality_Detector/1/G20479.HCC1143.2.converted.pe_1.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.fastq",
      "checksum" : "sha1$e31f47f69a6a7e1717427918371abeff5ceb8091",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "1",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/SBG_FASTQ_Quality_Detector/2/G20479.HCC1143.2.converted.pe_2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/SBG_FASTQ_Quality_Detector/2/G20479.HCC1143.2.converted.pe_2.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_2.fastq",
      "checksum" : "sha1$1099d08056ddc31c3ec4589139b44ced0622136c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ],
    "sjdbGTFfile" : [ {
      "size" : 847928511,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/files/Homo_sapiens.GRCh37.75.gtf",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/files/Homo_sapiens.GRCh37.75.gtf",
      "name" : "Homo_sapiens.GRCh37.75.gtf",
      "checksum" : "sha1$f46a5407f5fc1823860a7ddd7e1f322098f34d84",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : { }
      },
      "$type" : "File"
    } ],
    "sjdbOverhang" : 100
  },
  "outputs" : {
    "aligned_reads" : {
      "size" : 13401245515,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Aligned.out.bam",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Aligned.out.bam",
      "name" : "G20479.HCC1143.2.converted.pe.Aligned.out.bam",
      "checksum" : "sha1$afee8c75ed6a348c21cf18ba19036158578b5e98",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "log_files" : [ {
      "size" : 1710,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Log.final.out",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Log.final.out",
      "name" : "G20479.HCC1143.2.converted.pe.Log.final.out",
      "checksum" : "sha1$8df6129bc615cc6595251cff8e45ed1f1fd03d89",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 3786,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Log.progress.out",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Log.progress.out",
      "name" : "G20479.HCC1143.2.converted.pe.Log.progress.out",
      "checksum" : "sha1$4ee4927ea19100545cd8f2045265d112e9eb7a58",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 56031433,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Log.out",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Log.out",
      "name" : "G20479.HCC1143.2.converted.pe.Log.out",
      "checksum" : "sha1$70ba49a789159f642c5d42cd610cd8f62964f219",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ],
    "splice_junctions" : {
      "size" : 14306014,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.SJ.out.tab",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.SJ.out.tab",
      "name" : "G20479.HCC1143.2.converted.pe.SJ.out.tab",
      "checksum" : "sha1$7d1b502ab5ce1f7ccb52e4c9d4d80c066e443592",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "transcriptome_aligned_reads" : {
      "size" : 13592867747,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Aligned.toTranscriptome.out.bam",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Aligned.toTranscriptome.out.bam",
      "name" : "G20479.HCC1143.2.converted.pe.Aligned.toTranscriptome.out.bam",
      "checksum" : "sha1$e32d93713cd9efbd64ea161fdc4280c8feac7354",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "unmapped_reads" : [ {
      "size" : 579339758,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Unmapped.out.mate1.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Unmapped.out.mate1.fastq",
      "name" : "G20479.HCC1143.2.converted.pe.Unmapped.out.mate1.fastq",
      "checksum" : "sha1$d284181d45f9fd17d2c5015ce05047e89fa8f94b",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "1",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 579339758,
      "path" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Unmapped.out.mate2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170804082237/app-2017-08-04-100724.937/root/STAR/G20479.HCC1143.2.converted.pe.Unmapped.out.mate2.fastq",
      "name" : "G20479.HCC1143.2.converted.pe.Unmapped.out.mate2.fastq",
      "checksum" : "sha1$505408ada51e1e2897e63570adde4b825956c619",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ]
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "log_files", "reads_per_gene", "unmapped_reads", "chimeric_junctions", "chimeric_alignments", "transcriptome_aligned_reads", "intermediate_genome", "splice_junctions" ]
}